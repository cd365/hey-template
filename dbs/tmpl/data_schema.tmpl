// hey-template version: {{{.Version}}}

package data

import (
	"github.com/cd365/hey"

	"{{{.DataImportModelPackageName}}}"
)

type Tables struct {
    tableMap map[string]model.Table
    tableSlice []string
	{{{.DataMapListDefine}}}
}

func NewTables(
	{{{.DataMapListParams}}}
) *Tables {
	s := &Tables{
		{{{.DataMapListAssign}}}
	}
	s.tableMap = map[string]model.Table{
        {{{.DataMapListStorage}}}
    }
    s.tableSlice = []string{
        {{{.DataMapListSlice}}}
    }
    return s
}

func autoWay(defaultWay *hey.Way, options ...*hey.Way) *hey.Way {
	for i := len(options) - 1; i >= 0; i-- {
		if options[i] != nil {
			return options[i]
		}
	}
	return defaultWay
}

func (s *Tables) MAP() map[string]model.Table {
	length := len(s.tableMap)
	result := make(map[string]model.Table, length)
	for k, v := range s.tableMap {
		result[k] = v
	}
	return result
}

func (s *Tables) SLICE() []string {
	length := len(s.tableSlice)
	result := make([]string, length)
	copy(result, s.tableSlice)
	return result
}

func (s *Tables) WHERE() hey.Filter {
	return hey.NewFilter()
}

func (s *Tables) WRITER(table model.Table, way ...*hey.Way) Writer {
	return &writer{
		table: table,
		way:   autoWay(table.W(), way...),
	}
}

type Writer interface {
	Add(i interface{}, prefix ...func(add *hey.Add)) (int64, error)
	AddMust(i interface{}, prefix ...func(add *hey.Add)) error
	Del(where hey.Filter) (int64, error)
	DelMust(where hey.Filter) error
	Mod(where hey.Filter, modify interface{}, prefix ...func(mod *hey.Mod)) (int64, error)
	ModMust(where hey.Filter, modify interface{}, prefix ...func(mod *hey.Mod)) error
}

type writer struct {
	table model.Table
	way   *hey.Way
}

func (s *writer) Add(i interface{}, prefix ...func(add *hey.Add)) (int64, error) {
	tmp := s.table.Add(s.way).Except(s.table.AddExcept()...)
	if length := len(prefix); length > 0 {
		prefix[length-1](tmp)
	}
	s.table.AddAt(tmp, s.way)
	return tmp.Create(i).Add()
}

func (s *writer) AddMust(i interface{}, prefix ...func(add *hey.Add)) error {
	return model.HeyMustAffectedRows(s.Add(i, prefix...))
}

func (s *writer) Del(where hey.Filter) (int64, error) {
	return s.table.Del(s.way).Where(where).Del()
}

func (s *writer) DelMust(where hey.Filter) error {
	return model.HeyMustAffectedRows(s.Del(where))
}

func (s *writer) Mod(where hey.Filter, modify interface{}, prefix ...func(mod *hey.Mod)) (int64, error) {
	tmp := s.table.Mod(s.way).Except(s.table.ModExcept()...)
	if length := len(prefix); length > 0 {
		prefix[length-1](tmp)
	}
	s.table.ModAt(tmp, s.way)
	return tmp.Where(where).Modify(modify).Mod()
}

func (s *writer) ModMust(where hey.Filter, modify interface{}, prefix ...func(mod *hey.Mod)) error {
	return model.HeyMustAffectedRows(s.Mod(where, modify, prefix...))
}
