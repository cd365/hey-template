// hey-template version: {{{.Version}}}

package model

import (
	"database/sql"

	"errors"

	"github.com/cd365/hey"
)

const (
	TableAliasA = "a"
	TableAliasB = "b"
	TableAliasC = "c"
	TableAliasD = "d"
	TableAliasE = "e"
	TableAliasF = "f"
	TableAliasG = "g"
)

const (
	Switch0   = 0
	Switch1   = 1
	SwitchNo  = "N"
	SwitchYes = "Y"
	SwitchOn  = "ON"
	SwitchOff = "OFF"
)

var (
    ErrNotFound       = errors.New("the record does not exist")
    ErrNoAffectedRows = errors.New("there are no affected rows")
)

type Table interface {
	W(way ...*hey.Way) *hey.Way
    R(way ...*hey.Way) *hey.Way
    F(filters ...hey.Filter) hey.Filter
    Add(way ...*hey.Way) *hey.Add
    Del(way ...*hey.Way) *hey.Del
    Mod(way ...*hey.Way) *hey.Mod
    Get(way ...*hey.Way) *hey.Get
    Table() string
    Field() []string
    FieldMap() map[string]struct{}
    FieldExist(field string) bool
    CreatedAt() []string
    UpdatedAt() []string
    DeletedAt() []string
    AddExcept() []string
    ModExcept() []string
    AddAt(add *hey.Add, way ...*hey.Way)
    ModAt(mod *hey.Mod, way ...*hey.Way)
    NotExistsIndex(fields []string) []int
    // Insert the inserted object type is usually map[string]interface{}, AnyStruct, *AnyStruct, []AnyStruct, []*AnyStruct
    Insert(insert interface{}, way ...*hey.Way) (int64, error)
    Delete(filter hey.Filter, way ...*hey.Way) (int64, error)
    // Update the object type being updated is usually map[string]interface{}, AnyStruct, *AnyStruct
    Update(filter hey.Filter, update interface{}, way ...*hey.Way) (int64, error)
    Select(get func(get *hey.Get), query func(rows *sql.Rows) error, way ...*hey.Way) error
    SelectGet(get func(get *hey.Get), result interface{}, way ...*hey.Way) error
    SelectGetAll(query func(get *hey.Get), way ...*hey.Way) (interface{}, error)
    SelectGetOne(query func(get *hey.Get), way ...*hey.Way) (interface{}, error)
    Count(filter hey.Filter) (int64, error)
}

// TableCompareUpdateByUniqueFilter compare and update one row by unique key filter(only using equal)
func TableCompareUpdateByUniqueFilter(table Table, uniqueEqualFilter hey.Filter, origin interface{}, latest interface{}, way ...*hey.Way) (int64, error) {
	if table == nil || uniqueEqualFilter == nil {
		return 0, nil
	}
	if origin == nil && latest != nil {
		tmp, err := table.SelectGetOne(func(get *hey.Get) { get.Where(uniqueEqualFilter) }, way...)
		if err != nil {
			return 0, err
		}
		origin = tmp
	}
	fields, values := hey.StructUpdate(origin, latest, table.W(way...).Tag())
	modify := make(map[string]interface{})
	for k, v := range fields {
		modify[v] = values[k]
	}
	if len(modify) == 0 {
		return 0, nil
	}
	return table.Update(uniqueEqualFilter, modify, way...)
}

// TablePseudoDelete pseudo delete by filter
func TablePseudoDelete(table Table, filter hey.Filter, pseudo map[string]interface{}, way ...*hey.Way) (int64, error) {
    if table == nil || filter == nil || pseudo == nil {
        return 0, nil
    }
	return table.Update(filter, pseudo, way...)
}
