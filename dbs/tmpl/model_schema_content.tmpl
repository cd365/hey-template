
// {{{.TableNamePascal}}} | {{{.TableName}}} {{{if ne .TableComment ""}}}| {{{.TableComment}}}{{{end}}}
type {{{.TableNamePascal}}} struct {
{{{range $k, $v := .TableStructColumn}}}{{{$v}}}{{{end}}}
}

type Hey{{{.TableNamePascal}}} struct {
{{{range $k, $v := .TableStructColumnHey}}}{{{$v}}}{{{end}}}
    fieldMap map[string]struct{}
    fieldSlice []string
}

func (s *Hey{{{.TableNamePascal}}}) Table() string {
	return "{{{.TableNameWithSchema}}}" {{{if ne .TableComment ""}}}// {{{.TableComment}}}{{{end}}}
}

func (s *Hey{{{.TableNamePascal}}}) Field() []string {
	return s.fieldSlice
}

func (s *Hey{{{.TableNamePascal}}}) FieldMap() map[string]struct{} {
	return s.fieldMap
}

func (s *Hey{{{.TableNamePascal}}}) FieldStr() string {
	return {{{.TableStructColumnHeyFieldSliceValue}}}
}

func (s *Hey{{{.TableNamePascal}}}) FieldExist(field string) (exist bool) {
	_, exist = s.fieldMap[field]
	return
}

func (s *Hey{{{.TableNamePascal}}}) FieldAutoIncr() []string {
	return {{{.TableColumnAutoIncr}}}
}

func (s *Hey{{{.TableNamePascal}}}) FieldCreatedAt() []string {
	return {{{.TableColumnCreatedAt}}}
}

func (s *Hey{{{.TableNamePascal}}}) FieldUpdatedAt() []string {
	return {{{.TableColumnUpdatedAt}}}
}

func (s *Hey{{{.TableNamePascal}}}) FieldDeletedAt() []string {
	return {{{.TableColumnDeletedAt}}}
}

func New{{{.TableNamePascal}}}() *Hey{{{.TableNamePascal}}} {
	s := &Hey{{{.TableNamePascal}}}{
{{{range $k, $v := .TableStructColumnHeyValues}}}{{{$v}}}{{{end}}}
	}
	s.fieldMap = {{{.TableStructColumnHeyValuesAccessMap}}}
	s.fieldSlice = {{{.TableStructColumnHeyValuesAccess}}}
	return s
}

type Req{{{.TableNamePascal}}} struct {
{{{range $k, $v := .TableStructColumnReq}}}{{{$v}}}{{{end}}}
}
