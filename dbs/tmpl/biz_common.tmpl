// hey-template version: {{{.Version}}}

package biz

import (
	"fmt"
	"github.com/cd365/hey"
	"{{{.ModuleImportPrefix}}}data"
    "{{{.ModuleImportPrefix}}}model"
)

type Common struct {
	db  *data.Tables
	way hey.WayWriterReader
}

// NewCommon common 通用操作
func NewCommon(
	db *data.Tables,
	way hey.WayWriterReader,
) *Common {
	return &Common{
		db:  db,
		way: way,
	}
}

func (s *Common) F(filter ...hey.Filter) hey.Filter {
	return s.way.R().F(filter...)
}

// Save 保存一条或者多条数据(filter:单个字段作为条件过滤; save: map[string]interface{}:指定字段更新, 结构体:所有字段更新)
func (s *Common) Save(table model.Table, field string, values interface{}, save interface{}, way ...*hey.Way) (int64, error) {
	if values == nil {
		return table.Insert(save, way...) // 1 直接插入(单条|多条)
	}
	fvs := hey.SliceAny121(values)
	filter := table.F().In(field, fvs...)
	if tmp, ok := save.(map[string]interface{}); ok {
		return table.Update(filter, tmp, way...) // 2 直接更新(单条|多条)
	}
	// 单条记录
	if len(fvs) > 1 {
		return 0, fmt.Errorf("update or insert: mismatched data types")
	}
	had, err := table.SelectGetOne(func(get *hey.Get) { get.Where(filter) })
	if err != nil {
		return 0, err
	}
	if had == nil {
		return table.Insert(save, way...) // 单条插入
	}
	return table.Update(filter, save, way...) // 单条更新
}

// Remove 删除一条或者多条数据
func (s *Common) Remove(table model.Table, field string, values interface{}, way ...*hey.Way) (int64, error) {
	return table.Delete(table.F().In(field, values), way...)
}

func (s *Common) MustSave(table model.Table, field string, values interface{}, save interface{}, way ...*hey.Way) error {
	rowsAffected, err := s.Save(table, field, values, save, way...)
	if err != nil {
		return err
	}
	if rowsAffected <= 0 {
		return model.ErrNoAffectedRows
	}
	return nil
}

func (s *Common) MustRemove(table model.Table, field string, values interface{}, way ...*hey.Way) error {
	rowsAffected, err := s.Remove(table, field, values, way...)
	if err != nil {
		return err
	}
	if rowsAffected <= 0 {
		return model.ErrNoAffectedRows
	}
	return nil
}
{{{.MethodsContent}}}