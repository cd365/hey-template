// hey-template version: {{{.Version}}}

package data

import (
    "database/sql"

	"github.com/cd365/hey"

	"{{{.DataImportModelPackageName}}}"
)

type {{{.TableNamePascal}}} struct {
	tab *model.Hey{{{.TableNamePascal}}}
	way hey.WayWriterReader
}

// New{{{.TableNamePascal}}} {{{.TableName}}} {{{.TableComment}}}
func New{{{.TableNamePascal}}}(
	tab *model.Hey{{{.TableNamePascal}}},
	way hey.WayWriterReader,
) *{{{.TableNamePascal}}} {
	return &{{{.TableNamePascal}}}{
		tab: tab,
		way: way,
	}
}

func (s *{{{.TableNamePascal}}}) T() *model.Hey{{{.TableNamePascal}}} {
    return s.tab
}

func (s *{{{.TableNamePascal}}}) W(way ...*hey.Way) *hey.Way {
	return autoWay(s.way.W(), way...)
}

func (s *{{{.TableNamePascal}}}) R(way ...*hey.Way) *hey.Way {
	return autoWay(s.way.R(), way...)
}

func (s *{{{.TableNamePascal}}}) F(filters ...hey.Filter) hey.Filter {
	return s.way.R().F(filters...)
}

func (s *{{{.TableNamePascal}}}) Add(way ...*hey.Way) *hey.Add {
	return s.W(way...).Add(s.tab.Table())
}

func (s *{{{.TableNamePascal}}}) Del(way ...*hey.Way) *hey.Del {
	return s.W(way...).Del(s.tab.Table())
}

func (s *{{{.TableNamePascal}}}) Mod(way ...*hey.Way) *hey.Mod {
	return s.W(way...).Mod(s.tab.Table())
}

func (s *{{{.TableNamePascal}}}) Get(way ...*hey.Way) *hey.Get {
	return s.R(way...).Get(s.tab.Table()).Column(s.tab.Field()...)
}

func (s *{{{.TableNamePascal}}}) Table() string {
    return s.tab.Table()
}

func (s *{{{.TableNamePascal}}}) Field() []string {
    return s.tab.Field()
}

func (s *{{{.TableNamePascal}}}) FieldMap() map[string]struct{} {
	return s.tab.FieldMap()
}

func (s *{{{.TableNamePascal}}}) FieldExist(field string) bool {
    return s.tab.FieldExist(field)
}

func (s *{{{.TableNamePascal}}}) CreatedAt() []string {
	return s.tab.FieldCreatedAt()
}

func (s *{{{.TableNamePascal}}}) UpdatedAt() []string {
	return s.tab.FieldUpdatedAt()
}

func (s *{{{.TableNamePascal}}}) DeletedAt() []string {
	return s.tab.FieldDeletedAt()
}

func (s *{{{.TableNamePascal}}}) AddExcept() []string {
	return s.tab.FieldAutoIncr()
}

func (s *{{{.TableNamePascal}}}) ModExcept() (result []string) {
	result = s.AddExcept()
	result = append(result, s.tab.FieldCreatedAt()...)
	return
}

func (s *{{{.TableNamePascal}}}) AddAt(add *hey.Add, way ...*hey.Way) {
	timestamp := s.W(way...).Now().Unix()
	for _, field := range s.CreatedAt() {
		add.DefaultFieldValue(field, timestamp)
	}
	for _, field := range s.UpdatedAt() {
		add.DefaultFieldValue(field, timestamp)
	}
}

func (s *{{{.TableNamePascal}}}) ModAt(mod *hey.Mod, way ...*hey.Way) {
	timestamp := s.W(way...).Now().Unix()
	for _, field := range s.UpdatedAt() {
		mod.DefaultSet(field, timestamp)
	}
}

func (s *{{{.TableNamePascal}}}) NotExistsIndex(fields []string) []int {
	result := make([]int, 0)
	for k, v := range fields {
		if !s.FieldExist(v) {
			result = append(result, k)
		}
	}
	return result
}

func (s *{{{.TableNamePascal}}}) Insert(insert interface{}, way ...*hey.Way) (int64, error) {
	return s.SelfInsert(func(add *hey.Add, t *model.Hey{{{.TableNamePascal}}}) { model.HeyTableInsert(s, add, insert)  }, way...)
}

func (s *{{{.TableNamePascal}}}) Delete(filter hey.Filter, way ...*hey.Way) (int64, error) {
	return s.Del(way...).Where(filter).Del()
}

func (s *{{{.TableNamePascal}}}) Update(filter hey.Filter, update map[string]interface{}, way ...*hey.Way) (int64, error) {
	return s.SelfUpdate(func(mod *hey.Mod, t *model.Hey{{{.TableNamePascal}}}, w hey.Filter) {
        mod.Modify(update) // warn: don't call the Where method here, you should use `w` as a condition
        w.Filter(filter)
	}, way...)
}

func (s *{{{.TableNamePascal}}}) Select(get func(get *hey.Get), query func(rows *sql.Rows) error, way ...*hey.Way) error {
	tmp := s.Get(way...)
	get(tmp)
	return tmp.Query(query)
}

func (s *{{{.TableNamePascal}}}) SelectGet(get func(get *hey.Get), result interface{}, way ...*hey.Way) error {
	tmp := s.Get(way...)
	get(tmp)
	return tmp.Get(result)
}

func (s *{{{.TableNamePascal}}}) Count(filter hey.Filter) (int64, error) {
	return s.Get().SubQueryGet(s.SelfSubGet(func(get *hey.Get, t *model.Hey{{{.TableNamePascal}}}) {
		get.Where(s.F(filter))
	}), s.R().Identifier(model.TableAliasA).V()).Count()
}

func (s *{{{.TableNamePascal}}}) MustInsert(insert interface{}, way ...*hey.Way) error {
	return model.HeyMustAffectedRows(s.Insert(insert, way...))
}

func (s *{{{.TableNamePascal}}}) MustDelete(filter hey.Filter, way ...*hey.Way) error {
	return model.HeyMustAffectedRows(s.Delete(filter, way...))
}

func (s *{{{.TableNamePascal}}}) MustUpdate(filter hey.Filter, update map[string]interface{}, way ...*hey.Way) error {
	return model.HeyMustAffectedRows(s.Update(filter, update, way...))
}

func (s *{{{.TableNamePascal}}}) SelfInsert(fc func(add *hey.Add, t *model.Hey{{{.TableNamePascal}}}), way ...*hey.Way) (int64, error) {
	tmp := s.Add(way...).Except(s.AddExcept()...)
	fc(tmp, s.tab)
	s.AddAt(tmp, way...)
	return tmp.Add()
}

func (s *{{{.TableNamePascal}}}) SelfDelete(fc func(w hey.Filter, t *model.Hey{{{.TableNamePascal}}}), way ...*hey.Way) (int64, error) {
	tmp, w := s.Del(way...), s.F()
    fc(w, s.tab)
	return tmp.Where(w).Del()
}

func (s *{{{.TableNamePascal}}}) SelfUpdate(fc func(mod *hey.Mod, t *model.Hey{{{.TableNamePascal}}}, w hey.Filter), way ...*hey.Way) (int64, error) {
	tmp, w := s.Mod(way...).Except(s.ModExcept()...), s.F()
	fc(tmp, s.tab, w)
    s.ModAt(tmp, way...)
	return tmp.Where(w).Mod()
}

func (s *{{{.TableNamePascal}}}) SelfGetAll(query func(get *hey.Get), way ...*hey.Way) (result []*model.{{{.TableNamePascal}}}, err error) {
	tmp := s.Get(way...)
	query(tmp)
	err = tmp.Get(&result)
	return
}

func (s *{{{.TableNamePascal}}}) SelfGetOne(query func(get *hey.Get), way ...*hey.Way) (*model.{{{.TableNamePascal}}}, error) {
	tmp, err := s.SelfGetAll(func(get *hey.Get) {
		query(get)
		get.Limit(1)
	}, way...)
	if err != nil {
		return nil, err
	}
	if len(tmp) > 0 {
		return tmp[0], nil
	}
	return nil, nil
}

func (s *{{{.TableNamePascal}}}) SelfSubGet(query func(get *hey.Get, t *model.Hey{{{.TableNamePascal}}})) *hey.Get {
	get := s.Get()
	if query != nil {
		query(get, s.tab)
	}
	return get
}

func (s *{{{.TableNamePascal}}}) SelfMustInsert(fc func(add *hey.Add, t *model.Hey{{{.TableNamePascal}}}), way ...*hey.Way) error {
	return model.HeyMustAffectedRows(s.SelfInsert(fc, way...))
}

func (s *{{{.TableNamePascal}}}) SelfMustDelete(fc func(w hey.Filter, t *model.Hey{{{.TableNamePascal}}}), way ...*hey.Way) error {
	return model.HeyMustAffectedRows(s.SelfDelete(fc, way...))
}

// SelfMustUpdate it is forbidden to call *hey.Mod.Where() method
func (s *{{{.TableNamePascal}}}) SelfMustUpdate(fc func(mod *hey.Mod, t *model.Hey{{{.TableNamePascal}}}, w hey.Filter), way ...*hey.Way) error {
	return model.HeyMustAffectedRows(s.SelfUpdate(fc, way...))
}

func (s *{{{.TableNamePascal}}}) SelfMustGetAll(query func(get *hey.Get), way ...*hey.Way) ([]*model.{{{.TableNamePascal}}}, error) {
	tmp, err := s.SelfGetAll(query, way...)
	if err != nil {
		return nil, err
	}
	if len(tmp) == 0 {
		return nil, model.ErrNotFound
	}
	return tmp, nil
}

func (s *{{{.TableNamePascal}}}) SelfMustGetOne(query func(get *hey.Get), way ...*hey.Way) (*model.{{{.TableNamePascal}}}, error) {
	tmp, err := s.SelfGetOne(query, way...)
	if err != nil {
		return nil, err
	}
	if tmp == nil {
		return nil, model.ErrNotFound
	}
	return tmp, nil
}

/**
 * table.field custom method
 */
{{{.DataCustomMethod}}}