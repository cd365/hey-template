// hey-template version: {{{.Version}}}

package model

import (
	"database/sql"

	"errors"

	"github.com/cd365/hey"
)

var (
    ErrNotFound       = errors.New("the record does not exist")
)

type Table interface {
	W(way ...*hey.Way) *hey.Way
    R(way ...*hey.Way) *hey.Way
    F(filters ...hey.Filter) hey.Filter
    Add(way ...*hey.Way) *hey.Add
    Del(way ...*hey.Way) *hey.Del
    Mod(way ...*hey.Way) *hey.Mod
    Get(way ...*hey.Way) *hey.Get
    Table() string
    Field() []string
    FieldMap() map[string]struct{}
    FieldExist(field string) bool
    CreatedAt() []string
    UpdatedAt() []string
    DeletedAt() []string
    AddExcept() []string
    ModExcept() []string
    AddAt(add *hey.Add, way ...*hey.Way)
    ModAt(mod *hey.Mod, way ...*hey.Way)
    NotExistsIndex(fields []string) []int
    // Insert the inserted object type is usually map[string]interface{}, AnyStruct, *AnyStruct, []AnyStruct, []*AnyStruct
    Insert(insert interface{}, way ...*hey.Way) (int64, error)
    Delete(filter hey.Filter, way ...*hey.Way) (int64, error)
    // Update the object type being updated is usually map[string]interface{}, AnyStruct, *AnyStruct
    Update(filter hey.Filter, update map[string]interface{}, way ...*hey.Way) (int64, error)
    Select(get func(get *hey.Get), query func(rows *sql.Rows) error, way ...*hey.Way) error
    SelectGet(get func(get *hey.Get), result interface{}, way ...*hey.Way) error
    Count(filter hey.Filter) (int64, error)
    MustInsert(insert interface{}, way ...*hey.Way) error
    MustDelete(filter hey.Filter, way ...*hey.Way) error
    MustUpdate(filter hey.Filter, update map[string]interface{}, way ...*hey.Way) error
}

func HeyTableInsert(table Table, add *hey.Add, insert interface{}) {
	if mp, ok := insert.(map[string]interface{}); ok {
		for k, v := range mp {
			if table.FieldExist(k) {
				add.FieldValue(k, v)
			}
		}
		return
	}
	fields, values := hey.StructInsert(insert, table.R().Tag(), table.AddExcept()...)
	if index := table.NotExistsIndex(fields); len(index) > 0 {
		fields = hey.RemoveSliceMemberByIndex(index, fields)
		for k, v := range values {
			values[k] = hey.RemoveSliceMemberByIndex(index, v)
		}
	}
	add.FieldsValues(fields, values)
}

func HeyTableUpdate(table Table, update interface{}, updateExceptFields ...string) map[string]interface{} {
	exceptMap := make(map[string]struct{})
	updateExceptFields = append(updateExceptFields, table.ModExcept()...)
	for _, field := range updateExceptFields {
		exceptMap[field] = struct{}{}
	}
	result, ok := update.(map[string]interface{})
	if !ok {
		result = make(map[string]interface{})
		fields, values := hey.StructModify(update, table.W().Tag(), table.ModExcept()...)
		for index, field := range fields {
			result[field] = values[index]
		}
	}
	for field := range result {
		if _, ok = exceptMap[field]; ok || !table.FieldExist(field) {
			delete(result, field)
		}
	}
	return result
}
