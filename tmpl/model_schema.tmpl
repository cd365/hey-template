// hey-template version: {{{.Version}}}
// TEMPLATE CODE DO NOT EDIT IT.

package model

import (
	"github.com/cd365/hey/v2"
)

// AutoSelectWay Get the last non-empty element.
func AutoSelectWay(way *hey.Way, ways ...*hey.Way) *hey.Way {
	for i := len(ways) - 1; i >= 0; i-- {
		if ways[i] != nil {
			return ways[i]
		}
	}
	return way
}

// MapValues Get all the values of the map.
func MapValues[T interface{}, U comparable](m map[U]T) []T {
	slice := make([]T, 0, len(m))
	for _, v := range m {
		slice = append(slice, v)
	}
	return slice
}

// SliceToMap Slice to map.
func SliceToMap[T interface{}, U comparable](slice []T, key func(tmp T) U) map[U]T {
	length := len(slice)
	m := make(map[U]T, length)
	for i := 0; i < length; i++ {
		m[key(slice[i])] = slice[i]
	}
	return m
}

// ColumnValueIn Build column IN ( ... )
func ColumnValueIn[T any](column string, value func(tmp T) interface{}, slice []T) hey.Filter {
	filter := hey.F()
	inValues := make([]interface{}, 0, len(slice))
	for _, tmp := range slice {
		inValues = append(inValues, value(tmp))
	}
	return filter.In(column, inValues...)
}

type Table interface {
    Table() string
	Comment() string
	Column(except ...string) []string
	ColumnExist(column string) bool
	ColumnAutoIncr() []string
	ColumnCreatedAt() []string
	ColumnUpdatedAt() []string
	ColumnDeletedAt() []string

    Add(ways ...*hey.Way) *hey.Add
    Del(ways ...*hey.Way) *hey.Del
    Mod(ways ...*hey.Way) *hey.Mod
    Get(ways ...*hey.Way) *hey.Get
    Available() hey.Filter
	Insert(create interface{}, ways ...*hey.Way) (int64, error)
    Delete(where hey.Filter, ways ...*hey.Way) (int64, error)
    Update(update func(f hey.Filter, u *hey.Mod), ways ...*hey.Way) (int64, error)
    InsertOne(create interface{}, ways ...*hey.Way) (int64, error)
    SelectCount(where hey.Filter, ways ...*hey.Way) (int64, error)
}

type AllTable struct {
    schemaMap map[string]Table
    schemaSlice []string
	{{{.MapListDefine}}}
}

func NewAllTable(way *hey.Way) *AllTable {
	tmp := &AllTable{
		{{{.MapListAssign}}}
	}
	tmp.schemaMap = map[string]Table{
        {{{.MapListStorage}}}
    }
    tmp.schemaSlice = []string{
        {{{.MapListSlice}}}
    }
    return tmp
}

func (s *AllTable) TableMap() map[string]Table {
	length := len(s.schemaMap)
	result := make(map[string]Table, length)
	for k, v := range s.schemaMap {
		result[k] = v
	}
	return result
}

func (s *AllTable) TableSlice() []string {
	length := len(s.schemaSlice)
	result := make([]string, length)
	_ = copy(result, s.schemaSlice)
	return result
}

func (s *AllTable) TableExists(table string) bool {
	_, ok := s.schemaMap[table]
	return ok
}

// PrimaryKey Used to obtain the primary key column value of the database table.
type PrimaryKey interface {
	PrimaryKey() interface{}
}

// FetchPrimaryKey Get all primary key values.
func FetchPrimaryKey(pks ...PrimaryKey) []interface{} {
	length := len(pks)
	result := make([]interface{}, 0, length)
	for i := 0; i < length; i++ {
		if pks[i] == nil {
			continue
		}
		value := pks[i].PrimaryKey()
		if value == nil {
			continue
		}
		result = append(result, value)
	}
	return result
}
