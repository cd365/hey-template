// hey-template version: {{{.Version}}}

package arm

import (
    "context"
    "github.com/cd365/g"
	"github.com/cd365/go1/app/api/restful/e4"
	"github.com/cd365/hey"
	"{{{.PrefixPackage}}}/data"
	"{{{.PrefixPackage}}}/model"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

type {{{.OriginNamePascal}}} struct {
    gg  *g.GoGroup
	way *hey.Way
	ts  *data.Tables
	m   *data.{{{.OriginNamePascal}}}
}

// New{{{.OriginNamePascal}}} {{{.OriginName}}} {{{.Comment}}}
func New{{{.OriginNamePascal}}}(
    ctx context.Context,
    gg *g.GoGroup,
    way *hey.Way,
    ts  *data.Tables,
    m *data.{{{.OriginNamePascal}}},
) (*{{{.OriginNamePascal}}}, error) {
	s := &{{{.OriginNamePascal}}}{
        gg:  gg,
        way: way,
        ts:  ts,
        m:   m,
    }
    if err := s.start(ctx); err != nil {
        return nil, err
    }
    return s, nil
}

// Route register routes
func (s *{{{.OriginNamePascal}}}) Route(group *echo.Group) {
	r := group.Group("/{{{.OriginName}}}", middleware.Recover())
	r.POST("", s.AdminInsert)
	r.POST("/batch", s.AdminInsertBatch)
	r.DELETE("/remove", s.AdminRemove)
	r.PUT("", s.AdminUpdate)
	r.GET("", s.AdminSelect)
	{{{.PseudoDelete}}}
	s.CustomRoute(r)
}

// AdminInsert
//
//	@Summary	{{{.Comment}}} 添加
//	@Tags		后台管理.数据表.{{{.Comment}}}
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string				true	"token"
//	@Param		object			body		model.Add{{{.OriginNamePascal}}}	true	"request body args"
//	@Success	200				{object}	restful.R				"-"
//	@Success	400				{object}	restful.R				"-"
//	@Failure	500				{object}	restful.R				"-"
//	@Router		{{{.UrlPrefix}}}/{{{.OriginName}}} [post]
func (s *{{{.OriginNamePascal}}}) AdminInsert(ctx echo.Context) error {
    c := ctx.(*e4.C)
    args := &model.Add{{{.OriginNamePascal}}}{}
    if err := ctx.Bind(args); err != nil {
        return c.Bad(err)
    }
    if err := s.AdminInsertBefore(ctx, args); err != nil {
        return c.FailErr(err)
    }
    err := s.m.SelfMustInsert(func(tmp *hey.Add, t *model.Hey{{{.OriginNamePascal}}}) {
        tmp.Context(ctx.Request().Context()).Except(s.AdminInsertExcept()...).Create(args)
    })
    if err != nil {
        return c.FailErr(err)
    }
    return c.Ok()
}

// AdminInsertBatch
//
//	@Summary	{{{.Comment}}} 批量添加
//	@Tags		后台管理.数据表.{{{.Comment}}}
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string				true	"token"
//	@Param		object			body		[]model.Add{{{.OriginNamePascal}}}	true	"request body args"
//	@Success	200				{object}	restful.R				"-"
//	@Success	400				{object}	restful.R				"-"
//	@Failure	500				{object}	restful.R				"-"
//	@Router		{{{.UrlPrefix}}}/{{{.OriginName}}}/batch [post]
func (s *{{{.OriginNamePascal}}}) AdminInsertBatch(ctx echo.Context) error {
	c := ctx.(*e4.C)
    args := make([]*model.Add{{{.OriginNamePascal}}}, 0)
    if err := ctx.Bind(&args); err != nil {
        return c.Bad(err)
    }
    if len(args) > MaxBatch {
        return c.Fail("数据量过大")
    }
    if err := s.AdminInsertBefore(ctx, args...); err != nil {
        return c.FailErr(err)
    }
    _, err := s.m.SelfInsert(func(tmp *hey.Add, t *model.Hey{{{.OriginNamePascal}}}) {
        tmp.Context(ctx.Request().Context()).Except(s.AdminInsertExcept()...).Create(args)
    })
    if err != nil {
        return c.FailErr(err)
    }
    return c.Ok()
}

// AdminRemove
//
//	@Summary	{{{.Comment}}} 永久删除
//	@Tags		后台管理.数据表.{{{.Comment}}}
//	@Accept		json
//	@Produce	json
//	@Param		data			body		OfWhere	true	"filter"	1
//	@Param		Authorization	header		string	true	"authorization"
//	@Success	200				{object}	restful.R				"-"
//	@Success	400				{object}	restful.R				"-"
//	@Failure	500				{object}	restful.R				"-"
//	@Router		{{{.UrlPrefix}}}/{{{.OriginName}}}/remove [delete]
func (s *{{{.OriginNamePascal}}}) AdminRemove(ctx echo.Context) error {
	c := ctx.(*e4.C)
    args := &OfWhere{}
    if err := c.Bind(args); err != nil {
        return c.Bad(err)
    }
    if args.Filter == nil {
        return c.Ok()
    }
    filter, err := args.GetWhere()
    if err != nil {
        return c.Bad(err)
    }
    if filter == nil {
        return c.Ok()
    }
    if where := s.AdminRemoveForbidFilter(); where != nil {
        had, err := s.m.SelfGetOne(func(get *hey.Get) {
            get.SubQueryGet(s.m.Get().Where(where), hey.AliasA)
            get.Where(filter)
        })
        if err != nil {
            return c.FailErr(err)
        }
        if had != nil {
            return c.Fail(s.AdminRemoveForbidFilterMessage())
        }
    }
    if err = s.AdminRemoveBefore(ctx,filter);err != nil {
        return c.FailErr(err)
    }
    _, err = s.m.SelfDelete(func(del *hey.Del, t *model.Hey{{{.OriginNamePascal}}}) {
        del.Context(ctx.Request().Context()).Where(filter)
    })
    if err != nil {
        return c.FailErr(err)
    }
    return c.Ok()
}

type {{{.OriginNamePascal}}}UpdateArgs struct {
	OfWhere
	model.Mod{{{.OriginNamePascal}}}
}

// AdminUpdate
//
//	@Summary	{{{.Comment}}} 更新
//	@Tags		后台管理.数据表.{{{.Comment}}}
//	@Accept		json
//	@Produce	json
//	@Param		Authorization	header		string				true	"authorization"
//	@Param		object			body		{{{.OriginNamePascal}}}UpdateArgs	true	"request body args"
//	@Success	200				{object}	restful.R				"-"
//	@Success	400				{object}	restful.R				"-"
//	@Failure	500				{object}	restful.R				"-"
//	@Router		{{{.UrlPrefix}}}/{{{.OriginName}}} [put]
func (s *{{{.OriginNamePascal}}}) AdminUpdate(ctx echo.Context) error {
	c := ctx.(*e4.C)
    args := &{{{.OriginNamePascal}}}UpdateArgs{}
    if err := c.Bind(args); err != nil {
        return c.Bad(err)
    }
    if args.Filter == nil {
        return c.Ok()
    }
    filter, err := args.GetWhere()
    if err != nil {
        return c.Bad(err)
    }
    if filter == nil {
        return c.Ok()
    }
    if err = s.AdminUpdateBefore(ctx,filter,args);err != nil {
        return c.FailErr(err)
    }
    _, err = s.m.SelfUpdate(func(mod *hey.Mod, t *model.Hey{{{.OriginNamePascal}}}) {
        mod.Context(ctx.Request().Context()).Except(s.AdminUpdateExcept()...).Where(filter).Modify(args.Mod{{{.OriginNamePascal}}})
    })
    if err != nil {
        return c.FailErr(err)
    }
    return c.Ok()
}

func (s *{{{.OriginNamePascal}}}) adminSelectGet(ctx context.Context, query *GetQuery, way ...*hey.Way) (*hey.Get, error) {
	get := s.m.Get(way...).Context(ctx)
    fields := s.m.Field(s.AdminSelectExceptFields()...)
    get.Column(fields...)
    query.SetField(fields...)

    joins := query.GetJoins()
    if len(joins) > 0 {
        a := s.way.AliasA()
        get.Alias(a.V())
        query.SetIdent(a)
        fieldMap := hey.Slice2MapNewVal(fields, func(v string) string { return a.V(v) })
        query.SetFieldMap(fieldMap)
        query.SetWhereMap(fieldMap)
        query.SetOrderMap(fieldMap)

        get.Joins(joins...)
        get.Column(query.GetField()...)
    }

    filter, err := query.GetWhere(query.GetWhereMap())
    if err != nil {
        return nil, err
    }
    get.Where(filter)

    get.Order(query.GetOrder(), query.GetOrderMap())
    get.Limit(query.GetLimit())
    get.Offset(query.GetOffset())
    return get, nil
}

func (s *{{{.OriginNamePascal}}}) AdminSelectGet(ctx context.Context, query *GetQuery, way ...*hey.Way) ([]*model.{{{.OriginNamePascal}}}, error) {
	get, err := s.adminSelectGet(ctx, query, way...)
	if err != nil {
		return nil, err
	}
	result := make([]*model.{{{.OriginNamePascal}}}, 0)
	if query.IsCount {
        get.Limit(0)
        query.Count, err = s.m.Get().Context(ctx).SubQueryGet(get, hey.AliasA).Count()
        if err != nil {
            return nil, err
        }
        if query.Count == 0 {
            return result, nil
        }
        get.Limit(query.GetLimit())
    }
	if err = get.Get(&result); err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{{.OriginNamePascal}}}) AdminSelectViewMap(ctx context.Context, query *GetQuery, way ...*hey.Way) ([]map[string]interface{}, error) {
	get, err := s.adminSelectGet(ctx, query, way...)
	if err != nil {
		return nil, err
	}
	if query.IsCount {
        get.Limit(0)
        query.Count, err = s.m.Get().Context(ctx).SubQueryGet(get, hey.AliasA).Count()
        if err != nil {
            return nil, err
        }
        if query.Count == 0 {
            return make([]map[string]interface{}, 0), nil
        }
        get.Limit(query.GetLimit())
    }
	return get.ViewMap()
}


// AdminSelect
//
//	@Summary	{{{.Comment}}} 查询
//	@Tags		后台管理.数据表.{{{.Comment}}}
//	@Accept		json
//	@Produce	json
//	@Param		data			query		GetQuery	false	"object"
//	@Param		Authorization	header		string			true	"authorization"
//	@Success	200				{object}	restful.R{data=[]model.{{{.OriginNamePascal}}}}			"-"
//	@Success	400				{object}	restful.R				"-"
//	@Failure	500				{object}	restful.R				"-"
//	@Router		{{{.UrlPrefix}}}/{{{.OriginName}}} [get]
func (s *{{{.OriginNamePascal}}}) AdminSelect(ctx echo.Context) error {
    c := ctx.(*e4.C)
	query := NewGetQuery()
    if err := c.Bind(query); err != nil {
        return c.Bad(err)
    }
    result, err := s.AdminSelectViewMap(ctx.Request().Context(), query)
    if err != nil {
        return c.FailErr(err)
    }
    if query.IsCount {
        c.Count(query.Count)
    }
    return c.Data(result).Ok()
}

/**
 * 伪删除和其它自定义方法
 */
{{{.CustomMethod}}}