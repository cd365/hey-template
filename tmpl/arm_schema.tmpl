// hey-template version: {{{.Version}}}

package arm

import (
    "encoding/hex"
	"github.com/cd365/go1/app/api/restful"
	"github.com/cd365/hey"
	"strings"
)

const (
	// MaxBatch 批量操作允许的最大数
    MaxBatch = 500
)

type GetQuery struct {
	restful.OfField
	restful.OfWhere
	restful.OfMaxId
	restful.OfMinId
	restful.OfCount
	restful.OfOrder
	restful.OfLimit
	restful.OfOffset
	fieldMap map[string]string // 字段名替换, 可能存在表名前缀或者使用别名的情况, 故使用当前map进行替换 map[传入字段名]真实使用字段名
	joins    []*hey.GetJoin    // 自定义连接查询(默认使用连接查询,主表默认别名为"a")
	whereMap map[string]string // 替换WHERE条件中字段名(与字段名属性类似)
	orderMap map[string]string // 替换ORDER排序中的字段名(与字段名属性类似)
	ident    *hey.Ident        // 主表别名信息
	result   interface{}       // 接收检索结果的对象
	total    *int64            // 查询到的数据总条数
}

func NewGetQuery() *GetQuery {
	return &GetQuery{}
}

func (s *GetQuery) SetFieldMap(fieldMap map[string]string) *GetQuery {
	s.fieldMap = fieldMap
	return s
}

func (s *GetQuery) GetFieldMap() map[string]string {
	return s.fieldMap
}

func (s *GetQuery) AddFieldMap(fieldMap map[string]string) *GetQuery {
	return s.SetFieldMap(hey.MergeMap(s.GetFieldMap(), fieldMap))
}

func (s *GetQuery) SetField(field ...string) *GetQuery {
	fields := strings.Join(field, ",")
	s.Field = &fields
	return s
}

func (s *GetQuery) GetField() []string {
	if s.Field == nil || *s.Field == "" {
		return nil
	}
	fieldsString := *s.Field
	if bts, err := hex.DecodeString(*s.Field); err == nil {
		fieldsString = string(bts)
	}
	fields := strings.Split(fieldsString, ",")
	fieldMap := s.GetFieldMap()
	if fieldMap == nil {
		return fields
	}
	for k, v := range fields {
		if tmp, ok := fieldMap[v]; ok {
			fields[k] = tmp
		}
	}
	return fields
}

func (s *GetQuery) AddField(field ...string) *GetQuery {
	return s.SetField(*s.Field, strings.Join(field, ","))
}

func (s *GetQuery) SetJoins(joins ...*hey.GetJoin) *GetQuery {
	s.joins = joins
	return s
}

func (s *GetQuery) GetJoins() []*hey.GetJoin {
	return s.joins
}

func (s *GetQuery) SetWhereMap(whereMap map[string]string) *GetQuery {
	s.whereMap = whereMap
	return s
}

func (s *GetQuery) GetWhereMap() map[string]string {
	return s.whereMap
}

func (s *GetQuery) AddWhereMap(whereMap map[string]string) *GetQuery {
	return s.SetWhereMap(hey.MergeMap(s.GetWhereMap(), whereMap))
}

func (s *GetQuery) SetOrderMap(orderMap map[string]string) *GetQuery {
	s.orderMap = orderMap
	return s
}

func (s *GetQuery) GetOrderMap() map[string]string {
	return s.orderMap
}

func (s *GetQuery) SetIdent(ident *hey.Ident) *GetQuery {
	s.ident = ident
	return s
}

func (s *GetQuery) GetIdent() *hey.Ident {
	return s.ident
}
