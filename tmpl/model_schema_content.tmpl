// hey-template version: {{{.Version}}}

package model

// {{{.OriginNamePascal}}} | {{{.OriginName}}} {{{if ne .Comment ""}}}| {{{.Comment}}}{{{end}}}
type {{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumn}}}{{{$v}}}{{{end}}}
}

func (s *{{{.OriginNamePascal}}}) COPY() *{{{.OriginNamePascal}}} {
	tmp := *s
	return &tmp
}

func (s *{{{.OriginNamePascal}}}) COMPARE(c *{{{.OriginNamePascal}}}) map[string]interface{} {
	tmp := make(map[string]interface{}){{{.StructColumnUpdate}}}
	if len(tmp) == 0 {
        return nil
    }
	return tmp
}

type Hey{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnHey}}}{{{$v}}}{{{end}}}
    fieldMap map[string]*struct{}
    fieldSlice []string
}

func (s *Hey{{{.OriginNamePascal}}}) Table() string {
	return "{{{.OriginNameWithPrefix}}}" {{{if ne .Comment ""}}}// {{{.Comment}}}{{{end}}}
}

func (s *Hey{{{.OriginNamePascal}}}) Comment() string {
	return "{{{.Comment}}}"
}

func (s *Hey{{{.OriginNamePascal}}}) Field(except ...string) []string {
	excepted := make(map[string]*struct{})
    for _, v := range except {
        excepted[v] = &struct{}{}
    }
    result := make([]string, 0, len(s.fieldSlice))
    for _, v := range s.fieldSlice {
        if _, ok := excepted[v]; ok {
            continue
        }
        result = append(result, v)
    }
    return result
}

func (s *Hey{{{.OriginNamePascal}}}) FieldMap() map[string]*struct{} {
	result := make(map[string]*struct{}, len(s.fieldMap))
	for k, v := range s.fieldMap {
		result[k] = v
	}
	return result
}

func (s *Hey{{{.OriginNamePascal}}}) FieldStr() string {
	return {{{.StructColumnHeyFieldSliceValue}}}
}

func (s *Hey{{{.OriginNamePascal}}}) FieldExist(field string) bool {
	_, exist := s.fieldMap[field]
	return exist
}

func (s *Hey{{{.OriginNamePascal}}}) FieldAutoIncr() []string {
	return {{{.ColumnAutoIncr}}}
}

func (s *Hey{{{.OriginNamePascal}}}) FieldCreatedAt() []string {
	return {{{.ColumnCreatedAt}}}
}

func (s *Hey{{{.OriginNamePascal}}}) FieldUpdatedAt() []string {
	return {{{.ColumnUpdatedAt}}}
}

func (s *Hey{{{.OriginNamePascal}}}) FieldDeletedAt() []string {
	return {{{.ColumnDeletedAt}}}
}

func New{{{.OriginNamePascal}}}() *Hey{{{.OriginNamePascal}}} {
	s := &Hey{{{.OriginNamePascal}}}{
{{{range $k, $v := .StructColumnHeyValues}}}{{{$v}}}{{{end}}}
	}
	s.fieldMap = {{{.StructColumnHeyValuesAccessMap}}}
	s.fieldSlice = {{{.StructColumnHeyValuesAccess}}}
	return s
}

type Add{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnAdd}}}{{{$v}}}{{{end}}}
}

type Mod{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnMod}}}{{{$v}}}{{{end}}}
}
