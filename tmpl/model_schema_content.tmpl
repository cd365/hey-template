// hey-template version: {{{.Version}}}
// TEMPLATE CODE DO NOT EDIT IT.

package model

// {{{.OriginNamePascal}}} | {{{.OriginName}}} {{{if ne .Comment ""}}}| {{{.Comment}}}{{{end}}}
type {{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumn}}}{{{$v}}}{{{end}}}
}

func (s *{{{.OriginNamePascal}}}) Schema() *{{{.OriginNamePascal}}}Schema {
	return New{{{.OriginNamePascal}}}Schema()
}

type {{{.OriginNamePascal}}}Schema struct {
{{{range $k, $v := .StructColumnSchema}}}{{{$v}}}{{{end}}}
    fieldMap map[string]*struct{}
    fieldSlice []string
}

func (s *{{{.OriginNamePascal}}}Schema) Table() string {
	return "{{{.OriginNameWithPrefix}}}"
}

func (s *{{{.OriginNamePascal}}}Schema) Comment() string {
	return "{{{.Comment}}}"
}

func (s *{{{.OriginNamePascal}}}Schema) Column(except ...string) []string {
	excepted := make(map[string]*struct{})
    for _, v := range except {
        excepted[v] = &struct{}{}
    }
    result := make([]string, 0, len(s.fieldSlice))
    for _, v := range s.fieldSlice {
        if _, ok := excepted[v]; ok {
            continue
        }
        result = append(result, v)
    }
    return result
}

func (s *{{{.OriginNamePascal}}}Schema) ColumnMap() map[string]*struct{} {
	result := make(map[string]*struct{}, len(s.fieldMap))
	for k, v := range s.fieldMap {
		result[k] = v
	}
	return result
}

func (s *{{{.OriginNamePascal}}}Schema) ColumnString() string {
	return {{{.StructColumnSchemaFieldSliceValue}}}
}

func (s *{{{.OriginNamePascal}}}Schema) ColumnExist(field string) bool {
	_, exist := s.fieldMap[field]
	return exist
}

func (s *{{{.OriginNamePascal}}}Schema) ColumnAutoIncr() []string {
	return {{{.ColumnAutoIncr}}}
}

func (s *{{{.OriginNamePascal}}}Schema) ColumnCreatedAt() []string {
	return {{{.ColumnCreatedAt}}}
}

func (s *{{{.OriginNamePascal}}}Schema) ColumnUpdatedAt() []string {
	return {{{.ColumnUpdatedAt}}}
}

func (s *{{{.OriginNamePascal}}}Schema) ColumnDeletedAt() []string {
	return {{{.ColumnDeletedAt}}}
}

func New{{{.OriginNamePascal}}}Schema() *{{{.OriginNamePascal}}}Schema {
	s := &{{{.OriginNamePascal}}}Schema{
{{{range $k, $v := .StructColumnSchemaValues}}}{{{$v}}}{{{end}}}
	}
	s.fieldMap = {{{.StructColumnSchemaValuesAccessMap}}}
	s.fieldSlice = {{{.StructColumnSchemaValuesAccess}}}
	return s
}

type Add{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnAdd}}}{{{$v}}}{{{end}}}
}

type Mod{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnMod}}}{{{$v}}}{{{end}}}
}
