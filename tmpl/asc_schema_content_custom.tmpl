
// Delete
//
//	@Summary	{{{.TableComment}}} 删除
//	@Tags		后台管理.数据表.{{{.TableComment}}}
//	@Accept		json
//	@Produce	json
//	@Param		data			body		abc.OfFilter	true	"filter"	1
//	@Param		Authorization	header		string	true	"authorization"
//	@Success	200				{object}	echoes.RespBody				"-"
//	@Success	400				{object}	echoes.RespBody				"-"
//	@Failure	500				{object}	echoes.RespBody				"-"
//	@Router		{{{.UrlPrefix}}}/{{{.TableName}}} [delete]
func (s *{{{.TableNamePascal}}}) Delete(ctx echo.Context) error {
    c := ctx.(*echoes.Ctx)
    modify := make(map[string]interface{})
    timestamp := s.way.Now().Unix()
    {{{ range $val := .FieldLists -}}}
    modify["{{{$val}}}"] = timestamp
    {{{ end -}}}
    args := &abc.OfFilter{}
    if err := c.Bind(args); err != nil {
        return c.Bad(err)
    }
    filter, err := args.GetFilter()
    if err != nil {
        return c.Bad(err)
    }
    if filter == nil || filter.IsEmpty() {
        return c.Ok()
    }
    if err = s.ofDelete(ctx, filter); err != nil {
		return c.FailErr(err)
	}
    _, err = s.m.OfUpdate(c.Request().Context(), func(f hey.Filter, t *model.Hey{{{.TableNamePascal}}}) {
		f.Filter(filter)
	}, modify)
    if err != nil {
        return c.Fail(err.Error())
    }
    return c.Ok()
}
