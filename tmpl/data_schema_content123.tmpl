// hey-template version: {{{.Version}}}

// 在这里你可以增加一些关于当前表的通用方法, 以便于统一处理对数据库当前表的操作
// 当前文件中定义的方法与业务强关联, 如果该文件存在, 模板系统将不再生成当前文件
// 因此可以在该文件最后适当添加自定义方法, 该文件所有暴露方法均存在 `Of` 前缀

package data

import (
	"context"
	"database/sql"
	"github.com/cd365/hey"
	"{{{.PrefixPackage}}}/model"
)

// OfInsertIgnoreColumns 插入数据需要忽略的字段列表
func (s *{{{.OriginNamePascal}}}) OfInsertIgnoreColumns() []string {
	return s.schema.insertIgnoreColumns[:]
}

// OfUpdateIgnoreColumns 更新数据需要忽略的字段列表
func (s *{{{.OriginNamePascal}}}) OfUpdateIgnoreColumns() []string {
	return s.schema.updateIgnoreColumns[:]
}

// OfSelectIgnoreColumns 查询数据需要忽略的字段列表
func (s *{{{.OriginNamePascal}}}) OfSelectIgnoreColumns() []string {
	return s.schema.selectIgnoreColumns[:]
}

// OfDeleteFilter 删除数据的前提条件(删除的数据必须满足当前方法返回的条件)
func (s *{{{.OriginNamePascal}}}) OfDeleteFilter() hey.Filter {
	return s.F(s.schema.deleteFilter)
}

// OfUpdateFilter 更新数据的前提条件(更新的数据必须满足当前方法返回的条件)
func (s *{{{.OriginNamePascal}}}) OfUpdateFilter() hey.Filter {
	return s.F(s.schema.updateFilter)
}

// OfSelectFilter 查询数据的前提条件(查询的数据必须满足当前方法返回的条件)
func (s *{{{.OriginNamePascal}}}) OfSelectFilter() hey.Filter {
	return s.F(s.schema.selectFilter)
}

// OfDeleteForbidMsg 删除不允许删除的数据(提示语)
func (s *{{{.OriginNamePascal}}}) OfDeleteForbidMsg() string {
	return s.schema.deleteForbidMsg
}

// OfUpdateForbidMsg 更新不允许更新的数据(提示语)
func (s *{{{.OriginNamePascal}}}) OfUpdateForbidMsg() string {
	return s.schema.updateForbidMsg
}

// OfExists 检测数据是否存在
func (s *{{{.OriginNamePascal}}}) OfExists(ctx context.Context, filter hey.Filter, way ...*hey.Way) (bool, error) {
	return s.Get(way...).Context(ctx).Where(s.F(s.schema.selectFilter, filter)).Exists()
}

// OfExists1 检测数据是否存在
func (s *{{{.OriginNamePascal}}}) OfExists1(ctx context.Context, fc func(f hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) (bool, error) {
	filter := s.F()
	if fc != nil {
		fc(filter, s.T)
	}
	return s.OfExists(ctx, filter, way...)
}

// OfInsert 插入数据
func (s *{{{.OriginNamePascal}}}) OfInsert(ctx context.Context, insert interface{}, way ...*hey.Way) (int64, error) {
	add := s.Add(way...).Context(ctx).Except(s.schema.insertIgnoreColumns...)
	if fieldValue, ok := insert.(map[string]interface{}); ok {
		allow := make(map[string]*struct{})
		for _, field := range s.schema.insertPermitColumns {
			allow[field] = &struct{}{}
		}
		allowed := len(allow) > 0
		num := 0
		for field, value := range fieldValue {
			if allowed {
				if _, ok = allow[field]; !ok {
					continue
				}
			}
			num++
			add.FieldValue(field, value)
		}
		if num == 0 {
			return 0, nil
		}
		s.AddAt(add, way...)
		return add.Add()
	}
	fields, values := hey.StructInsert(insert, s.W.Tag(), s.schema.insertIgnoreColumns, s.schema.insertPermitColumns)
	if len(fields) == 0 {
		return 0, nil
	}
	add.FieldsValues(fields, values)
	s.AddAt(add, way...)
	return add.Add()
}

// OfInsertMust 必须成功插入数据
func (s *{{{.OriginNamePascal}}}) OfInsertMust(ctx context.Context, insert interface{}, way ...*hey.Way) error {
	return hey.MustAffectedRows(s.OfInsert(ctx, insert, way...))
}

// OfDelete 删除数据
func (s *{{{.OriginNamePascal}}}) OfDelete(ctx context.Context, fc func(f hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) (int64, error) {
	return s.SelfDelete(func(del *hey.Del, t *model.Hey{{{.OriginNamePascal}}}) {
        del.Context(ctx)
		filter := s.F(s.schema.deleteFilter)
		if fc != nil {
			fc(filter, t)
		}
		del.Where(filter)
	}, way...)
}

// OfDeleteMust 必须成功删除数据
func (s *{{{.OriginNamePascal}}}) OfDeleteMust(ctx context.Context, fc func(f hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) error {
	return hey.MustAffectedRows(s.OfDelete(ctx, fc, way...))
}

// OfUpdate 更新数据
func (s *{{{.OriginNamePascal}}}) OfUpdate(ctx context.Context, fc func(f hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), update interface{}, way ...*hey.Way) (int64, error) {
	return s.SelfUpdate(func(mod *hey.Mod, t *model.Hey{{{.OriginNamePascal}}}) {
		except := s.schema.updateIgnoreColumns
		mod.Context(ctx).Except(except...)
		filter := s.F(s.schema.updateFilter)
		if fc != nil {
			fc(filter, t)
		}
		mod.Where(filter)
		if modify, ok := update.(map[string]interface{}); ok {
			for k, v := range modify {
				if s.FieldExist(k) {
					mod.Set(k, v)
				}
			}
			return
		}
		fields, values := hey.StructModify(update, s.W.Tag(), except...)
		for index, field := range fields {
			if s.FieldExist(field) {
				mod.Set(field, values[index])
			}
		}
	}, way...)
}

// OfUpdateMust 必须成功更新数据
func (s *{{{.OriginNamePascal}}}) OfUpdateMust(ctx context.Context, fc func(f hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), update interface{}, way ...*hey.Way) error {
	return hey.MustAffectedRows(s.OfUpdate(ctx, fc, update, way...))
}

// OfUpdate1 更新数据(通过数据比较更新)
func (s *{{{.OriginNamePascal}}}) OfUpdate1(ctx context.Context, fc func(f hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), origin *model.{{{.OriginNamePascal}}}, latest *model.{{{.OriginNamePascal}}}, way ...*hey.Way) (int64, error) {
	return s.OfUpdate(ctx, fc, origin.COMPARE(latest), way...)
}

// OfUpdateMust1 必须成功更新数据(通过数据比较更新)
func (s *{{{.OriginNamePascal}}}) OfUpdateMust1(ctx context.Context, fc func(f hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), origin *model.{{{.OriginNamePascal}}}, latest *model.{{{.OriginNamePascal}}}, way ...*hey.Way) error {
	return hey.MustAffectedRows(s.OfUpdate(ctx, fc, origin.COMPARE(latest), way...))
}

// OfSelect 查询数据
func (s *{{{.OriginNamePascal}}}) OfSelect(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), takeOut func(get *hey.Get) error, way ...*hey.Way) error {
	filter := s.F()
	filter.Filter(s.schema.selectFilter)
	get := s.Get(way...).Context(ctx)
	if query != nil {
		query(get, filter, s.T)
	}
	get.Where(filter)
	return takeOut(get)
}

// OfSelectOne 查询一条数据
func (s *{{{.OriginNamePascal}}}) OfSelectOne(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) (*model.{{{.OriginNamePascal}}}, error) {
	result := make([]*model.{{{.OriginNamePascal}}}, 0)
	if err := s.OfSelect(ctx, query, func(get *hey.Get) error { return get.Limit(1).Get(&result) }, way...); err != nil {
		return nil, err
	}
	if len(result) == 0 {
		return nil, nil
	}
	return result[0], nil
}

// OfSelectAll 查询多条数据
func (s *{{{.OriginNamePascal}}}) OfSelectAll(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) ([]*model.{{{.OriginNamePascal}}}, error) {
	result := make([]*model.{{{.OriginNamePascal}}}, 0)
	if err := s.OfSelect(ctx, query, func(get *hey.Get) error { return get.Get(&result) }, way...); err != nil {
		return nil, err
	}
	return result, nil
}

// OfSelectGet 查询一条或多条数据, 通过反射把数据赋值到result
func (s *{{{.OriginNamePascal}}}) OfSelectGet(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), result interface{}, way ...*hey.Way) error {
	return s.OfSelect(ctx, query, func(get *hey.Get) error { return get.Get(result) }, way...)
}

// OfSelectMap 查询一条或多条数据, 将数据存储到map[string]interface{}中
func (s *{{{.OriginNamePascal}}}) OfSelectMap(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) ([]map[string]interface{}, error) {
	var result []map[string]interface{}
	if err := s.OfSelect(ctx, query, func(get *hey.Get) error {
		data, err := get.ViewMap()
		if err != nil {
			return err
		}
		result = data
		return nil
	}, way...); err != nil {
		return nil, err
	}
	return result, nil
}

// OfSelectMap1 查询一条或多条数据, 将数据存储到map[string]interface{}中, 单独处理空值[]map[string]interface{}
func (s *{{{.OriginNamePascal}}}) OfSelectMap1(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) ([]map[string]interface{}, error) {
	result, err := s.OfSelectMap(ctx, query, way...)
	if err != nil {
		return nil, err
	}
	if result == nil {
		result = make([]map[string]interface{}, 0)
	}
	return result, nil
}

// OfSelectScanOne 查询一条数据, 把查询到的数据依次扫描到dest列表(变量地址)中
func (s *{{{.OriginNamePascal}}}) OfSelectScanOne(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), dest []interface{}, way ...*hey.Way) error {
	return s.OfSelect(ctx, query, func(get *hey.Get) error { return get.ScanOne(dest...) }, way...)
}

// OfSelectScanAll 查询多条数据, 把查询到的数据交给scanAll处理, scanAll应该一次扫描数据到对应的变量地址上
func (s *{{{.OriginNamePascal}}}) OfSelectScanAll(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), scanAll func(rows *sql.Rows) error, way ...*hey.Way) error {
	return s.OfSelect(ctx, query, func(get *hey.Get) error { return get.ScanAll(scanAll) }, way...)
}

// OfCount 统计数据总条数
func (s *{{{.OriginNamePascal}}}) OfCount(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) (count int64, err error) {
	err = s.OfSelect(ctx, query, func(get *hey.Get) error {
		count, err = get.Count()
		return err
	}, way...)
	return
}

// OfCountSelect 统计数据总条数并查询数据
func (s *{{{.OriginNamePascal}}}) OfCountSelect(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), takeOut func(get *hey.Get) error, way ...*hey.Way) (count int64, err error) {
	err = s.OfSelect(ctx, query, func(get *hey.Get) error {
		count, err = get.Count()
		if err != nil {
			return err
		}
		if count == 0 {
			return nil
		}
		return takeOut(get)
	}, way...)
	return
}

// OfCountSelectAll 统计数据总条数并查询多条数据
func (s *{{{.OriginNamePascal}}}) OfCountSelectAll(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) (count int64, result []*model.{{{.OriginNamePascal}}}, err error) {
	count, err = s.OfCountSelect(ctx, query, func(get *hey.Get) error { return get.Get(&result) }, way...)
	return
}

// OfCountSelectGet 统计数据总条数并查询多条数据, 通过反射把数据赋值到result
func (s *{{{.OriginNamePascal}}}) OfCountSelectGet(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), result interface{}, way ...*hey.Way) (count int64, err error) {
	count, err = s.OfCountSelect(ctx, query, func(get *hey.Get) error { return get.Get(&result) }, way...)
	return
}

// OfCountSelectMap 统计数据总条数并查询多条数据, 将数据存储到map[string]interface{}中
func (s *{{{.OriginNamePascal}}}) OfCountSelectMap(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) (count int64, result []map[string]interface{}, err error) {
	count, err = s.OfCountSelect(ctx, query, func(get *hey.Get) error {
		result, err = get.ViewMap()
		return err
	}, way...)
	return
}

// OfCountSelectMap1 统计数据总条数并查询多条数据, 将数据存储到map[string]interface{}中, 单独处理空值[]map[string]interface{}
func (s *{{{.OriginNamePascal}}}) OfCountSelectMap1(ctx context.Context, query func(get *hey.Get, filter hey.Filter, t *model.Hey{{{.OriginNamePascal}}}), way ...*hey.Way) (count int64, result []map[string]interface{}, err error) {
	count, result, err = s.OfCountSelectMap(ctx, query, way...)
	if err != nil {
		return 0, nil, err
	}
	if result == nil {
		result = make([]map[string]interface{}, 0)
	}
	return count, result, nil
}

// ofStart 启动自定义服务
func (s *{{{.OriginNamePascal}}}) ofStart(ctx context.Context) error {
	// 根据业务自定义相关属性
	t := s.T
	insertIgnoreColumns := s.AddExcept()
	updateIgnoreColumns := s.ModExcept()
	var selectIgnoreColumns []string
	s.schema = &schema{
		insertIgnoreColumns: insertIgnoreColumns,
		updateIgnoreColumns: updateIgnoreColumns,
		selectIgnoreColumns: selectIgnoreColumns,

		insertPermitColumns: t.Field(insertIgnoreColumns...),
		selectPermitColumns: t.Field(selectIgnoreColumns...),

		deleteFilter: s.F(),
		updateFilter: s.F(),
		selectFilter: s.F(),

        deleteForbidMsg: "系统数据,禁止删除",
		updateForbidMsg: "系统数据,禁止更新",
	}

	_ = ctx

	// TODO 启动自定义服务
	return nil
}

// ++++++++++++++++++++++
// +++ CUSTOM METHODS +++
// ++++++++++++++++++++++

// OfCustomBusiness for example your custom business
func (s *{{{.OriginNamePascal}}}) OfCustomBusiness(ctx context.Context, way ...*hey.Way) error {
	_, _ = ctx, way
	panic("implement your custom business")
}