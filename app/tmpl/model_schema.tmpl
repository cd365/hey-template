// hey-template version: {{{.Version}}}
// TEMPLATE CODE DO NOT EDIT IT.

package {{{.Package}}}

import (
    "context"
    "database/sql"
    "encoding/hex"
    "fmt"
    "github.com/cd365/hey/v2"
    "regexp"
    "strconv"
    "strings"
    "time"
)

// AutoSelectWay Get the last non-empty element.
func AutoSelectWay(way *hey.Way, ways ...*hey.Way) *hey.Way {
	for i := len(ways) - 1; i >= 0; i-- {
		if ways[i] != nil {
			return ways[i]
		}
	}
	return way
}

// PrimaryKey Used to obtain the primary key column value of the database table.
type PrimaryKey interface {
	PrimaryKey() interface{}
}

type Table interface {
    Basic() *Basic
    Table() string
    Comment() string
    Column(except ...string) []string
    ColumnMap() map[string]*struct{}
    ColumnString() string
    ColumnExist(column string) bool
    ColumnValue(columnValue ...interface{}) map[string]interface{}
    ColumnAutoIncr() []string
    ColumnCreatedAt() []string
    ColumnUpdatedAt() []string
    ColumnDeletedAt() []string

    Filter(filters ...func(f hey.Filter)) hey.Filter
    Add(ways ...*hey.Way) *hey.Add
    Del(ways ...*hey.Way) *hey.Del
    Mod(ways ...*hey.Way) *hey.Mod
    Get(ways ...*hey.Way) *hey.Get
    Way(ways ...*hey.Way) *hey.Way
    Available() hey.Filter
    Insert(create interface{}, ways ...*hey.Way) (int64, error)
    Delete(where hey.Filter, ways ...*hey.Way) (int64, error)
    Update(update func(f hey.Filter, u *hey.Mod), ways ...*hey.Way) (int64, error)
    InsertOne(create interface{}, ways ...*hey.Way) (int64, error)
    InsertSelect(column []string, get *hey.Get, ways ...*hey.Way) (int64, error)
    SelectCount(where hey.Filter, ways ...*hey.Way) (int64, error)
    SelectQuery(where hey.Filter, custom func(get *hey.Get), query func(rows *sql.Rows) error, ways ...*hey.Way) error
    SelectGet(where hey.Filter, custom func(get *hey.Get), receive interface{}, ways ...*hey.Way) error
    SelectExists(where hey.Filter, custom func(get *hey.Get), ways ...*hey.Way) (bool, error)
    SelectCountGet(where hey.Filter, custom func(get *hey.Get), receive interface{}, ways ...*hey.Way) (int64, error)
    DeleteByColumn(column string, values interface{}, filters ...hey.Filter) (int64, error)
    UpdateByColumn(column string, values interface{}, modify interface{}, filters ...hey.Filter) (int64, error)
    SelectExistsByColumn(column string, values interface{}, customs ...func(f hey.Filter, g *hey.Get)) (bool, error)
    SelectGetByColumn(column string, values interface{}, receive interface{}, customs ...func(f hey.Filter, g *hey.Get)) error

    PrimaryKey() string
    PrimaryKeyUpdate(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyHidden(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyDelete(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyUpsert(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyUpdateAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyHiddenAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyDeleteAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyUpsertAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyEqual(value interface{}) hey.Filter
    PrimaryKeyIn(values ...interface{}) hey.Filter
    PrimaryKeyUpdateMap(primaryKey interface{}, modify map[string]interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyUpsertMap(primaryKey interface{}, upsert map[string]interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyDeleteFilter(primaryKeys interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeySelectExists(primaryKey interface{}, filter hey.Filter, ways ...*hey.Way) (bool, error)
    PrimaryKeySelectCount(primaryKeys interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyExists(primaryKey interface{}, ways ...*hey.Way) (bool, error)

    ValueStruct() interface{}
    ValueStructPtr() interface{}
    ValueSliceStruct(capacities ...int) interface{}
    ValueSliceStructPtr(capacities ...int) interface{}
}

type Basic struct {
	// ctx Execute sql default context.
	ctx context.Context

	// sqlExecuteMaxDuration Execute sql max duration.
	sqlExecuteMaxDuration time.Duration
}

func (s *Basic) SetSqlExecuteMaxDuration(duration time.Duration) *Basic {
	if duration > 0 {
		s.sqlExecuteMaxDuration = duration
	}
	return s
}

type Database struct {
    schemaMap map[string]Table
    schemaSlice []string

	{{{.DatabaseAttributeDefine}}}
}

func NewDatabase(ctx context.Context, way *hey.Way) *Database {
    basic := Basic{
        ctx:                ctx,
        sqlExecuteMaxDuration: time.Minute,
    }
	tmp := &Database{
		{{{.NewDatabaseAttributeAssign}}}
	}
	tmp.schemaMap = map[string]Table{
        {{{.NewDatabaseAttributeAssignMap}}}
    }
    tmp.schemaSlice = []string{
        {{{.NewDatabaseAttributeAssignSlice}}}
    }
    return tmp
}

func (s *Database) TableMap() map[string]Table {
	length := len(s.schemaMap)
	result := make(map[string]Table, length)
	for k, v := range s.schemaMap {
		result[k] = v
	}
	return result
}

func (s *Database) TableSlice() []string {
	length := len(s.schemaSlice)
	result := make([]string, length)
	_ = copy(result, s.schemaSlice)
	return result
}

func (s *Database) TableExists(table string) bool {
	_, ok := s.schemaMap[table]
	return ok
}

// Database{{{.Schema}}} When there are multiple data instances, and you are using wire (github.com/google/wire), use the current instance to avoid duplicate type names.
type Database{{{.Schema}}} struct {
	db *Database
}

func NewDatabase{{{.Schema}}}(ctx context.Context, way *hey.Way) *Database{{{.Schema}}} {
	return &Database{{{.Schema}}}{
		db: NewDatabase(ctx, way),
	}
}

func (s *Database{{{.Schema}}}) Database() *Database {
	return s.db
}

/* common structures for querying data */

// QueryIndexValueMaxMin MAX or MIN index value.
type QueryIndexValueMaxMin struct {
	IndexValueMax *int64 `json:"index_max" query:"index_max" form:"index_max" validate:"omitempty,min=0"` // maximum (index or serial) value
	IndexValueMin *int64 `json:"index_min" query:"index_min" form:"index_min" validate:"omitempty,min=0"` // minimum (index or serial) value
}

func (s QueryIndexValueMaxMin) HasIndexValueMax() bool {
	return s.IndexValueMax != nil && s.IndexValueMin == nil
}

func (s QueryIndexValueMaxMin) HasIndexValueMin() bool {
	return s.IndexValueMin != nil && s.IndexValueMax == nil
}

func (s QueryIndexValueMaxMin) UseIndexValueMax(column string, filter hey.Filter) bool {
	if !s.HasIndexValueMax() || column == "" || filter == nil {
		return false
	}
	filter.LessThan(column, *s.IndexValueMax)
	return true
}

func (s QueryIndexValueMaxMin) UseIndexValueMin(column string, filter hey.Filter) bool {
	if !s.HasIndexValueMin() || column == "" || filter == nil {
		return false
	}
	filter.GreaterThan(column, *s.IndexValueMin)
	return true
}

func NewIndexValueMax(maxValue int64) *QueryIndexValueMaxMin {
	return &QueryIndexValueMaxMin{IndexValueMax: &maxValue}
}

func NewIndexValueMin(minValue int64) *QueryIndexValueMaxMin {
	return &QueryIndexValueMaxMin{IndexValueMin: &minValue}
}

type QueryKeyword struct {
	Keyword *string `json:"keyword" query:"keyword" form:"keyword" validate:"omitempty,min=1,max=32"` // search keyword
}

func (s QueryKeyword) GetKeyword() string {
	return fmt.Sprintf("%%%s%%", *s.Keyword)
}

func (s QueryKeyword) UseKeyword(column string, filter hey.Filter) bool {
	if s.Keyword != nil && *s.Keyword != "" || column == "" || filter == nil {
		return false
	}
	filter.Like(column, s.GetKeyword())
	return true
}

var (
	// regexpQueryTimeDuration column BETWEEN start AND end; "1701234567,1701320967" OR "1701234567000,1701320967000" OR "2006-01-02,2006-01-03" OR "2006-01-02 15:04:05,2006-01-03 15:04:05"
	regexpQueryTimeDuration = regexp.MustCompile(`^([1-9][0-9]{9},[1-9][0-9]{9})|([1-9][0-9]{12},[1-9][0-9]{12})|([12][0-9]{3}-[01][0-9]-[0123][0-9],[12][0-9]{3}-[01][0-9]-[0123][0-9])|([12][0-9]{3}-[01][0-9]-[0123][0-9] [012][0-9]:[012345][0-9]:[012345][0-9],[12][0-9]{3}-[01][0-9]-[0123][0-9] [012][0-9]:[012345][0-9]:[012345][0-9])$`)
)

type QueryTimeDuration string // time duration `min-value,max-value` example format: `1701234567,1701320967` OR `1701234567000,1701320967000` OR `2006-01-02,2006-01-03` OR `2006-01-02 15:04:05,2006-01-03 15:04:05`

func (s QueryTimeDuration) splitTimeDuration() []string {
	if !regexpQueryTimeDuration.MatchString(string(s)) {
		return nil
	}
	splits := strings.Split(string(s), ",")
	if len(splits) != 2 {
		return nil
	}
	return splits
}

func (s QueryTimeDuration) splitTimeDurationUseTimestamp(column string, filter hey.Filter, splits []string) bool {
	if column == "" || filter == nil {
		return false
	}
	length := len(splits)
	if length != 2 {
		return false
	}
	lists := make([]interface{}, 0, length)
	for _, tmp := range splits {
		i64, err := strconv.ParseInt(tmp, 10, 64)
		if err != nil {
			return false
		}
		if i64 <= 0 {
			return false
		}
		lists = append(lists, i64)
	}
	if len(splits[0]) != len(splits[1]) {
		return false
	}
	difference := lists[1].(int64) - lists[0].(int64)
	if difference < 0 {
		return false
	}
	if difference == 0 {
		filter.Equal(column, lists[0].(int64))
	} else {
		filter.Between(column, lists[0], lists[1])
	}
	return true
}

func (s QueryTimeDuration) splitTimeDurationUseDateOrDatetime(column string, filter hey.Filter, splits []string, timeLayout string) bool {
	if column == "" || filter == nil || len(splits) != 2 {
		return false
	}
	lists := make([]interface{}, 0, 2)
	for _, tmp := range splits {
		timeDate, err := time.Parse(timeLayout, tmp)
		if err != nil {
			return false
		}
		lists = append(lists, timeDate)
	}
	if len(lists) != 2 {
		return false
	}
	difference := lists[1].(time.Time).Unix() - lists[0].(time.Time).Unix()
	if difference < 0 {
		return false
	}
	if difference == 0 {
		filter.Equal(column, splits[0])
	} else {
		filter.Between(column, splits[0], splits[1])
	}
	return true
}

func (s QueryTimeDuration) UseTimeDurationTimestamp(column string, filter hey.Filter) bool {
	return s.splitTimeDurationUseTimestamp(column, filter, s.splitTimeDuration())
}

func (s QueryTimeDuration) UseTimeDurationDate(column string, filter hey.Filter) bool {
	return s.splitTimeDurationUseDateOrDatetime(column, filter, s.splitTimeDuration(), time.DateOnly)
}

func (s QueryTimeDuration) UseTimeDurationDatetime(column string, filter hey.Filter) bool {
	return s.splitTimeDurationUseDateOrDatetime(column, filter, s.splitTimeDuration(), time.DateTime)
}

func (s QueryTimeDuration) UseTimeDuration(column string, filter hey.Filter) bool {
	splits := s.splitTimeDuration()
	if splits == nil {
		return false
	}
	if s.splitTimeDurationUseTimestamp(column, filter, splits) {
		return true
	}
	if s.splitTimeDurationUseDateOrDatetime(column, filter, splits, time.DateOnly) {
		return true
	}
	if s.splitTimeDurationUseDateOrDatetime(column, filter, splits, time.DateTime) {
		return true
	}
	return false
}

type QueryFilterIn string // column IN ( ?, ?, ? ... )  example-integer: 1,2,3... example-string: a,2,c... OR hex("1"),hex("2"),hex("3")...

func (s QueryFilterIn) UseInInt(column string, filter hey.Filter, adjusts ...func(item int64) (int64, error)) bool {
	if column == "" || filter == nil {
		return false
	}
	splits := strings.Split(strings.ReplaceAll(string(s), " ", ""), ",")
	length := len(splits)
	if length == 0 {
		return false
	}
	var adjust func(item int64) (int64, error)
	for i := len(adjusts) - 1; i >= 0; i-- {
		if adjusts[i] != nil {
			adjust = adjusts[i]
			break
		}
	}
	lists := make([]interface{}, 0, length)
	for _, tmp := range splits {
		if i64, err := strconv.ParseInt(tmp, 10, 64); err != nil {
			return false
		} else {
			if adjust != nil {
				if i64, err = adjust(i64); err == nil {
					return false
				}
			}
			lists = append(lists, i64)
		}
	}
	filter.In(column, lists...)
	return true
}

func (s QueryFilterIn) UseInString(column string, filter hey.Filter, adjusts ...func(item string) (string, error)) bool {
	if column == "" || filter == nil {
		return false
	}
	splits := strings.Split(strings.TrimSpace(string(s)), ",")
	length := len(splits)
	if length == 0 {
		return false
	}
	var adjust func(item string) (string, error)
	for i := len(adjusts) - 1; i >= 0; i-- {
		if adjusts[i] != nil {
			adjust = adjusts[i]
			break
		}
	}
	lists := make([]interface{}, 0, length)
	for _, tmp := range splits {
		if adjust != nil {
			if item, err := adjust(tmp); err != nil {
				return false
			} else {
				tmp = item
			}
		}
		lists = append(lists, tmp)
	}
	filter.In(column, lists...)
	return true
}

type QueryOrder string // sorting field1:a,field2:d,field3:a... OR StringToHexFunc(field1:a,field2:d,field3:a...)

func (s QueryOrder) GetOrder(adjusts ...func(item string) (string, error)) string {
	orderBy := strings.TrimSpace(string(s))
	if orderBy == "" {
		return ""
	}
	if adjusts == nil {
		// try calling hex.DecodeString()
		if bts, err := hex.DecodeString(orderBy); err == nil {
			orderBy = string(bts)
		}
	}
	for i := len(adjusts) - 1; i >= 0; i-- {
		if adjusts[i] != nil {
			adjusted, err := adjusts[i](orderBy)
			if err != nil {
				return ""
			}
			orderBy = adjusted
			break
		}
	}
	return orderBy
}

type QueryLimitOffset struct {
	Limit *int64 `json:"limit" query:"limit" form:"limit" validate:"omitempty,min=1,max=5000"` // page size [1,5000]

	Offset *int64 `json:"offset" query:"offset" form:"offset" validate:"omitempty,min=0,max=100000"` // offset value [0,100000]

	Page *int64 `json:"page" query:"page" form:"page" validate:"omitempty,min=1"` // page value [1,+∞)
}

func (s QueryLimitOffset) GetLimit() int64 {
	if s.Limit == nil {
		return 1
	}
	return *s.Limit
}

func (s QueryLimitOffset) GetPage() int64 {
	if s.Page == nil {
		return 1
	}
	return *s.Page
}

func (s QueryLimitOffset) GetOffset() int64 {
	if s.Page != nil {
		return (*s.Page - 1) * s.GetLimit()
	}
	if s.Offset != nil && *s.Offset >= 0 {
		return *s.Offset
	}
	return 0
}
