// hey-template version: {{{.Version}}}
// TEMPLATE CODE DO NOT EDIT IT.

package {{{.Package}}}

import (
    "context"
    "database/sql"
	"github.com/cd365/hey/v2"
	"time"
)

// AutoSelectWay Get the last non-empty element.
func AutoSelectWay(way *hey.Way, ways ...*hey.Way) *hey.Way {
	for i := len(ways) - 1; i >= 0; i-- {
		if ways[i] != nil {
			return ways[i]
		}
	}
	return way
}

// MapValues Get all the values of the map.
func MapValues[T interface{}, U comparable](m map[U]T) []T {
	slice := make([]T, 0, len(m))
	for _, v := range m {
		slice = append(slice, v)
	}
	return slice
}

// SliceToMap Slice to map.
func SliceToMap[T interface{}, U comparable](slice []T, key func(tmp T) U) map[U]T {
	length := len(slice)
	m := make(map[U]T, length)
	for i := 0; i < length; i++ {
		m[key(slice[i])] = slice[i]
	}
	return m
}

// ColumnValueIn Build column IN ( ... )
func ColumnValueIn[T any](column string, value func(tmp T) interface{}, slice []T) hey.Filter {
	filter := hey.F()
	inValues := make([]interface{}, 0, len(slice))
	for _, tmp := range slice {
		inValues = append(inValues, value(tmp))
	}
	return filter.In(column, inValues...)
}

// PrimaryKey Used to obtain the primary key column value of the database table.
type PrimaryKey interface {
	PrimaryKey() interface{}
}

type Table interface {
    Basic() *Basic
    Table() string
    Comment() string
    Column(except ...string) []string
    ColumnMap() map[string]*struct{}
    ColumnString() string
    ColumnExist(column string) bool
    ColumnValue(columnValue ...interface{}) map[string]interface{}
    ColumnAutoIncr() []string
    ColumnCreatedAt() []string
    ColumnUpdatedAt() []string
    ColumnDeletedAt() []string

    Filter(filters ...func(f hey.Filter)) hey.Filter
    Add(ways ...*hey.Way) *hey.Add
    Del(ways ...*hey.Way) *hey.Del
    Mod(ways ...*hey.Way) *hey.Mod
    Get(ways ...*hey.Way) *hey.Get
    Way(ways ...*hey.Way) *hey.Way
    Available() hey.Filter
    Insert(create interface{}, ways ...*hey.Way) (int64, error)
    Delete(where hey.Filter, ways ...*hey.Way) (int64, error)
    Update(update func(f hey.Filter, u *hey.Mod), ways ...*hey.Way) (int64, error)
    InsertOne(create interface{}, ways ...*hey.Way) (int64, error)
    InsertSelect(column []string, get *hey.Get, ways ...*hey.Way) (int64, error)
    SelectCount(where hey.Filter, ways ...*hey.Way) (int64, error)
    SelectQuery(where hey.Filter, custom func(get *hey.Get), query func(rows *sql.Rows) error, ways ...*hey.Way) error
    SelectGet(where hey.Filter, custom func(get *hey.Get), receive interface{}, ways ...*hey.Way) error
    SelectExists(where hey.Filter, custom func(get *hey.Get), ways ...*hey.Way) (bool, error)
    SelectCountGet(where hey.Filter, custom func(get *hey.Get), receive interface{}, ways ...*hey.Way) (int64, error)
    DeleteByColumn(column string, values interface{}, filters ...hey.Filter) (int64, error)
    UpdateByColumn(column string, values interface{}, modify interface{}, filters ...hey.Filter) (int64, error)
    SelectExistsByColumn(column string, values interface{}, customs ...func(f hey.Filter, g *hey.Get)) (bool, error)
    SelectGetByColumn(column string, values interface{}, receive interface{}, customs ...func(f hey.Filter, g *hey.Get)) error

    PrimaryKey() string
    PrimaryKeyUpdate(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyHidden(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyDelete(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyUpsert(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyUpdateAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyHiddenAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyDeleteAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyUpsertAll(way *hey.Way, pks ...PrimaryKey) (int64, error)
    PrimaryKeyEqual(value interface{}) hey.Filter
    PrimaryKeyIn(values ...interface{}) hey.Filter
    PrimaryKeyUpdateMap(primaryKey interface{}, modify map[string]interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyUpsertMap(primaryKey interface{}, upsert map[string]interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyDeleteFilter(primaryKeys interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeySelectExists(primaryKey interface{}, filter hey.Filter, ways ...*hey.Way) (bool, error)
    PrimaryKeySelectCount(primaryKeys interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error)
    PrimaryKeyExists(primaryKey interface{}, ways ...*hey.Way) (bool, error)

    ValueStruct() interface{}
    ValueStructPtr() interface{}
    ValueSliceStruct(capacities ...int) interface{}
    ValueSliceStructPtr(capacities ...int) interface{}
}

type Basic struct {
	// ctx Execute sql default context.
	ctx context.Context

	// sqlExecuteMaxDuration Execute sql max duration.
	sqlExecuteMaxDuration time.Duration
}

func (s *Basic) SetSqlExecuteMaxDuration(duration time.Duration) *Basic {
	if duration > 0 {
		s.sqlExecuteMaxDuration = duration
	}
	return s
}

type Database struct {
    schemaMap map[string]Table
    schemaSlice []string

	{{{.DatabaseAttributeDefine}}}
}

func NewDatabase(ctx context.Context, way *hey.Way) *Database {
    basic := Basic{
        ctx:                ctx,
        sqlExecuteMaxDuration: time.Minute,
    }
	tmp := &Database{
		{{{.NewDatabaseAttributeAssign}}}
	}
	tmp.schemaMap = map[string]Table{
        {{{.NewDatabaseAttributeAssignMap}}}
    }
    tmp.schemaSlice = []string{
        {{{.NewDatabaseAttributeAssignSlice}}}
    }
    return tmp
}

func (s *Database) TableMap() map[string]Table {
	length := len(s.schemaMap)
	result := make(map[string]Table, length)
	for k, v := range s.schemaMap {
		result[k] = v
	}
	return result
}

func (s *Database) TableSlice() []string {
	length := len(s.schemaSlice)
	result := make([]string, length)
	_ = copy(result, s.schemaSlice)
	return result
}

func (s *Database) TableExists(table string) bool {
	_, ok := s.schemaMap[table]
	return ok
}

// Database{{{.Schema}}} When there are multiple data instances, and you are using wire (github.com/google/wire), use the current instance to avoid duplicate type names.
type Database{{{.Schema}}} struct {
	db *Database
}

func NewDatabase{{{.Schema}}}(ctx context.Context, way *hey.Way) *Database{{{.Schema}}} {
	return &Database{{{.Schema}}}{
		db: NewDatabase(ctx, way),
	}
}

func (s *Database{{{.Schema}}}) Database() *Database {
	return s.db
}