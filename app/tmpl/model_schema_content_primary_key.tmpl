
// PrimaryKey Table primary key column name.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKey() string {
	return s.{{{.PrimaryKeyUpper}}}
}

// PrimaryKeyUpdate Update based on the primary key as a condition. primaryKey can be any struct or struct pointer that implements the PrimaryKey interface. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyUpdate(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error) {
    if primaryKey == nil {
        return 0, nil
    }
    pk := primaryKey.PrimaryKey()
    if pk == nil {
        return 0, nil
    }
	return s.Update(func(f hey.Filter, u *hey.Mod) {
        f.Equal(s.PrimaryKey(), pk).Use(filter)
        u.Modify(primaryKey)
    }, ways...)
}

// PrimaryKeyHidden Hidden based on the primary key as a condition. primaryKey can be any struct or struct pointer that implements the PrimaryKey interface. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyHidden(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error) {
    if primaryKey == nil {
        return 0, nil
    }
    pk := primaryKey.PrimaryKey()
    if pk == nil {
        return 0, nil
    }
	updates := make(map[string]interface{}, 8)
	way := s.Way(ways...)
	now := way.Now()
	for _, tmp := range s.ColumnDeletedAt() {
		updates[tmp] = now.Unix()
	}
	if len(updates) == 0 {
		return 0, nil
	}
	return s.Update(func(f hey.Filter, u *hey.Mod) {
        f.Equal(s.PrimaryKey(), pk).Use(filter)
        u.Modify(updates)
    }, way)
}

// PrimaryKeyDelete Delete based on the primary key as a condition. primaryKey can be any struct or struct pointer that implements the PrimaryKey interface. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyDelete(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error) {
    if primaryKey == nil {
        return 0, nil
    }
    pk := primaryKey.PrimaryKey()
    if pk == nil {
        return 0, nil
    }
	return s.Delete(s.Filter(func(f hey.Filter) {
        f.Equal(s.PrimaryKey(), pk).Use(filter)
    }), ways...)
}

// PrimaryKeyUpsert Upsert based on the primary key as a condition. primaryKey can be any struct or struct pointer that implements the PrimaryKey interface. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyUpsert(primaryKey PrimaryKey, filter hey.Filter, ways ...*hey.Way) (int64, error) {
	if primaryKey == nil {
		return 0, nil
	}
	pk := primaryKey.PrimaryKey()
	if pk == nil {
		return s.InsertOne(primaryKey, ways...)
	}
	return s.PrimaryKeyUpdate(primaryKey, filter, ways...)
}

// PrimaryKeyUpdateAll Batch update based on primary key value.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyUpdateAll(way *hey.Way, pks ...PrimaryKey) (int64, error) {
	var total int64
	err := s.Way(way).Transaction(context.TODO(), func(tx *hey.Way) error {
		for _, tmp := range pks {
			if num, err := s.PrimaryKeyUpdate(tmp, nil, tx); err != nil {
				return err
			} else {
				total += num
			}
		}
		return nil
	})
	if err != nil {
		return 0, err
	}
	return total, nil
}

// PrimaryKeyHiddenAll Batch hidden based on primary key value.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyHiddenAll(way *hey.Way, pks ...PrimaryKey) (int64, error) {
	var total int64
	err := s.Way(way).Transaction(context.TODO(), func(tx *hey.Way) error {
		for _, tmp := range pks {
			if num, err := s.PrimaryKeyHidden(tmp, nil, tx); err != nil {
				return err
			} else {
				total += num
			}
		}
		return nil
	})
	if err != nil {
		return 0, err
	}
	return total, nil
}

// PrimaryKeyDeleteAll Batch delete based on primary key value.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyDeleteAll(way *hey.Way, pks ...PrimaryKey) (int64, error) {
	var total int64
	err := s.Way(way).Transaction(context.TODO(), func(tx *hey.Way) error {
		for _, tmp := range pks {
			if num, err := s.PrimaryKeyDelete(tmp, nil, tx); err != nil {
				return err
			} else {
				total += num
			}
		}
		return nil
	})
	if err != nil {
		return 0, err
	}
	return total, nil
}

// PrimaryKeyUpsertAll Batch upsert based on primary key value.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyUpsertAll(way *hey.Way, pks ...PrimaryKey) (int64, error) {
	var total int64
	var err error
    var num int64
	err = s.Way(way).Transaction(context.TODO(), func(tx *hey.Way) error {
		for _, tmp := range pks {
			if tmp == nil {
                continue
            }
            pk := tmp.PrimaryKey()
            if pk == nil {
                num, err = s.Insert(tmp, tx)
            } else {
                num, err = s.PrimaryKeyUpdate(tmp, nil, tx)
            }
            if err != nil {
                return err
            } else {
                total += num
            }
		}
		return nil
	})
	if err != nil {
		return 0, err
	}
	return total, nil
}

// PrimaryKeyEqual Build Filter PrimaryKey = value
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyEqual(value interface{}) hey.Filter {
	return hey.F().Equal(s.PrimaryKey(), value)
}

// PrimaryKeyIn Build Filter PrimaryKey IN ( values... )
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyIn(values ...interface{}) hey.Filter {
	return hey.F().In(s.PrimaryKey(), values...)
}

// PrimaryKeyUpdateMap Update a row of data using map[string]interface{} by primary key value. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyUpdateMap(primaryKey interface{}, modify map[string]interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error) {
	if primaryKey == nil || len(modify) == 0 {
		return 0, nil
	}
	return s.Update(func(f hey.Filter, u *hey.Mod) {
		f.Use(s.PrimaryKeyEqual(primaryKey), filter)
		u.Modify(modify)
	}, ways...)
}

// PrimaryKeyUpsertMap Upsert a row of data using map[string]interface{} by primary key value. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyUpsertMap(primaryKey interface{}, upsert map[string]interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error) {
	if len(upsert) == 0 {
		return 0, nil
	}
	if primaryKey == nil {
		return s.Insert(upsert, ways...)
	}
	exists, err := s.PrimaryKeySelectExists(primaryKey, filter, ways...)
	if err != nil {
		return 0, err
	}
	if !exists {
		return s.Insert(upsert, ways...)
	}
	return s.Update(func(f hey.Filter, u *hey.Mod) {
		f.Use(s.PrimaryKeyEqual(primaryKey), filter)
		u.Modify(upsert)
	}, ways...)
}

// PrimaryKeyDeleteFilter Delete one or more records based on the primary key values. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyDeleteFilter(primaryKeys interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error) {
	return s.Delete(s.PrimaryKeyIn(primaryKeys).Use(filter), ways...)
}

// PrimaryKeySelectAll Query multiple records based on primary key values. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectAll(primaryKeys interface{}, custom func(get *hey.Get), filter hey.Filter, ways ...*hey.Way) ([]*{{{.OriginNamePascal}}}, error) {
	return s.SelectAll(s.PrimaryKeyIn(primaryKeys).Use(filter, s.Available()), custom, ways...)
}

// PrimaryKeySelectOne Query a piece of data based on the primary key value. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectOne(primaryKey interface{}, custom func(get *hey.Get), filter hey.Filter, ways ...*hey.Way) (*{{{.OriginNamePascal}}}, error) {
	return s.SelectOne(s.PrimaryKeyEqual(primaryKey).Use(filter, s.Available()), custom, ways...)
}

// PrimaryKeySelectOneAsc Query a piece of data based on the primary key value. Additional conditions can be added in the filter. ORDER BY PrimaryKey ASC
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectOneAsc(primaryKey interface{}, custom func(get *hey.Get), filter hey.Filter, ways ...*hey.Way) (*{{{.OriginNamePascal}}}, error) {
	return s.PrimaryKeySelectOne(primaryKey, func(get *hey.Get) {
		if custom != nil {
			custom(get)
		}
		get.Asc(s.PrimaryKey())
	}, filter, ways...)
}

// PrimaryKeySelectOneDesc Query a piece of data based on the primary key value. Additional conditions can be added in the filter. ORDER BY PrimaryKey DESC
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectOneDesc(primaryKey interface{}, custom func(get *hey.Get), filter hey.Filter, ways ...*hey.Way) (*{{{.OriginNamePascal}}}, error) {
	return s.PrimaryKeySelectOne(primaryKey, func(get *hey.Get) {
		if custom != nil {
			custom(get)
		}
		get.Desc(s.PrimaryKey())
	}, filter, ways...)
}

// PrimaryKeySelectExists Check whether the data exists based on the primary key value. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectExists(primaryKey interface{}, filter hey.Filter, ways ...*hey.Way) (bool, error) {
	if primaryKey == nil {
		return false, nil
	}
	exists, err := s.PrimaryKeySelectOne(primaryKey, func(get *hey.Get) { get.Column(s.PrimaryKey()) }, filter, ways...)
    if err != nil {
        return false, err
    }
    return exists != nil, nil
}

// PrimaryKeySelectCount The number of statistics based on primary key values. Additional conditions can be added in the filter.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectCount(primaryKeys interface{}, filter hey.Filter, ways ...*hey.Way) (int64, error) {
	if primaryKeys == nil {
		return 0, nil
	}
	return s.SelectCount(s.PrimaryKeyIn(primaryKeys).Use(filter, s.Available()), ways...)
}

{{{/* Generate different types of map structures according to the primary key value type, including string, int, int64. */}}}
{{{ if ne .PrimaryKeyType "" }}}
    {{{ if eq .PrimaryKeyType "string" }}}
// PrimaryKeySelectAllMap Make map[string]*{{{.OriginNamePascal}}} and []*{{{.OriginNamePascal}}}
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectAllMap(primaryKeys interface{}, custom func(get *hey.Get), filter hey.Filter, ways ...*hey.Way) (map[{{{.PrimaryKeyType}}}]*{{{.OriginNamePascal}}}, []*{{{.OriginNamePascal}}}, error) {
    return s.SelectAllMap(s.PrimaryKeyIn(primaryKeys).Use(filter, s.Available()), func(v *{{{.OriginNamePascal}}}) {{{.PrimaryKeyType}}} { return v.{{{.PrimaryKeyPascal}}} }, custom, ways...)
}
    {{{ end }}}

    {{{ if eq .PrimaryKeyType "int" }}}
// PrimaryKeySelectAllMap Make map[int]*{{{.OriginNamePascal}}} and []*{{{.OriginNamePascal}}}
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectAllMap(primaryKeys interface{}, custom func(get *hey.Get), filter hey.Filter, ways ...*hey.Way) (map[{{{.PrimaryKeyType}}}]*{{{.OriginNamePascal}}}, []*{{{.OriginNamePascal}}}, error) {
	return s.SelectAllMapInt(s.PrimaryKeyIn(primaryKeys).Use(filter, s.Available()), func(v *{{{.OriginNamePascal}}}) {{{.PrimaryKeyType}}} { return v.{{{.PrimaryKeyPascal}}} }, custom, ways...)
}
    {{{ end }}}

    {{{ if eq .PrimaryKeyType "int64" }}}
// PrimaryKeySelectAllMap Make map[int64]*{{{.OriginNamePascal}}} and []*{{{.OriginNamePascal}}}
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeySelectAllMap(primaryKeys interface{}, custom func(get *hey.Get), filter hey.Filter, ways ...*hey.Way) (map[{{{.PrimaryKeyType}}}]*{{{.OriginNamePascal}}}, []*{{{.OriginNamePascal}}}, error) {
    return s.SelectAllMapInt64(s.PrimaryKeyIn(primaryKeys).Use(filter, s.Available()), func(v *{{{.OriginNamePascal}}}) {{{.PrimaryKeyType}}} { return v.{{{.PrimaryKeyPascal}}} }, custom, ways...)
}
    {{{ end }}}
{{{ end }}}

// PrimaryKeyGetAll Query multiple records based on primary key values.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyGetAll(primaryKeys interface{}, ways ...*hey.Way) ([]*{{{.OriginNamePascal}}}, error) {
	return s.PrimaryKeySelectAll(primaryKeys, nil, nil, ways...)
}

// PrimaryKeyGetOne Query a piece of data based on the primary key value.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyGetOne(primaryKey interface{}, ways ...*hey.Way) (*{{{.OriginNamePascal}}}, error) {
	return s.PrimaryKeySelectOne(primaryKey, nil, nil, ways...)
}

// PrimaryKeyGetOneAsc Query a piece of data based on the primary key value. ORDER BY PrimaryKey ASC
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyGetOneAsc(primaryKey interface{}, ways ...*hey.Way) (*{{{.OriginNamePascal}}}, error) {
	return s.PrimaryKeySelectOneAsc(primaryKey, nil, nil, ways...)
}

// PrimaryKeyGetOneDesc Query a piece of data based on the primary key value. ORDER BY PrimaryKey DESC
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyGetOneDesc(primaryKey interface{}, ways ...*hey.Way) (*{{{.OriginNamePascal}}}, error) {
	return s.PrimaryKeySelectOneDesc(primaryKey, nil, nil, ways...)
}

// PrimaryKeyGetAllMap Make map[{{{.PrimaryKeyType}}}]*{{{.OriginNamePascal}}} and []*{{{.OriginNamePascal}}}
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyGetAllMap(primaryKeys interface{}, ways ...*hey.Way) (map[{{{.PrimaryKeyType}}}]*{{{.OriginNamePascal}}}, []*{{{.OriginNamePascal}}}, error) {
	return s.PrimaryKeySelectAllMap(primaryKeys, nil, nil, ways...)
}

// PrimaryKeyExists Check whether the data exists based on the primary key value.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) PrimaryKeyExists(primaryKey interface{}, ways ...*hey.Way) (bool, error) {
	return s.PrimaryKeySelectExists(primaryKey, nil, ways...)
}
