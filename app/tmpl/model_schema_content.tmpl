// hey-template version: {{{.Version}}}
// TEMPLATE CODE DO NOT EDIT IT.

package {{{.Package}}}

import (
    "context"
    "database/sql"
	"github.com/cd365/hey/v2"
)

// {{{.OriginNamePascal}}} | {{{.OriginName}}} {{{if ne .Comment ""}}}| {{{.Comment}}}{{{end}}}
type {{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumn}}}{{{$v}}}{{{end}}}
}

type {{{.Schema}}}{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnSchema}}}{{{$v}}}{{{end}}}
    columnMap map[string]*struct{}
    columnSlice []string

    basic *BASIC
    way *hey.Way
    table string
    comment string
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Basic() *BASIC {
	return s.basic
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Table() string {
	return s.table
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Comment() string {
	return s.comment
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Column(except ...string) []string {
	excepted := make(map[string]*struct{})
    for _, v := range except {
        excepted[v] = &struct{}{}
    }
    result := make([]string, 0, len(s.columnSlice))
    for _, v := range s.columnSlice {
        if _, ok := excepted[v]; ok {
            continue
        }
        result = append(result, v)
    }
    return result
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnMap() map[string]*struct{} {
	result := make(map[string]*struct{}, len(s.columnMap))
	for k, v := range s.columnMap {
		result[k] = v
	}
	return result
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnString() string {
	return {{{.StructColumnSchemaFieldSliceValue}}}
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnExist(column string) bool {
	_, exist := s.columnMap[column]
	return exist
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnValue(columnValue ...interface{}) map[string]interface{} {
	length := len(columnValue)
	if length == 0 || length&1 == 1 {
		return nil
	}
	result := make(map[string]interface{}, length)
	for i := 0; i < length; i += 2 {
	    if i >= length || i+1 >= length {
            continue
        }
		column, ok := columnValue[i].(string)
		if !ok {
			continue
		}
		if ok = s.ColumnExist(column); !ok {
			continue
		}
		result[column] = columnValue[i+1]
	}
	return result
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnAutoIncr() []string {
	return {{{.ColumnAutoIncr}}}
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnCreatedAt() []string {
	return {{{.ColumnCreatedAt}}}
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnUpdatedAt() []string {
	return {{{.ColumnUpdatedAt}}}
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ColumnDeletedAt() []string {
	return {{{.ColumnDeletedAt}}}
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ChangeTableName(table string) {
	s.table = table
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ChangeTableComment(comment string) {
	s.comment = comment
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ChangeTableColumn(columnSlice []string) {
	s.columnSlice = columnSlice
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Filter(filters ...func(f hey.Filter)) hey.Filter {
	filter := s.way.F()
	for _, tmp := range filters {
		if tmp != nil {
			tmp(filter)
		}
	}
	return filter
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Way(ways ...*hey.Way) *hey.Way {
	return AutoSelectWay(s.way, ways...)
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Add(ways ...*hey.Way) *hey.Add {
	except := s.ColumnAutoIncr()
	return s.Way(ways...).Add(s.Table()).Except(except...).Permit(s.Column(except...)...)
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Del(ways ...*hey.Way) *hey.Del {
	return s.Way(ways...).Del(s.Table())
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Mod(ways ...*hey.Way) *hey.Mod {
	except := s.ColumnAutoIncr()
	except = append(except, s.ColumnCreatedAt()...)
	return s.Way(ways...).Mod(s.Table()).Except(except...).Permit(s.Column(except...)...)
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Get(ways ...*hey.Way) *hey.Get {
	return s.Way(ways...).Get(s.Table()).Column(s.Column()...)
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Available() hey.Filter {
	return s.Filter(func(f hey.Filter) {
		for _, v := range s.ColumnDeletedAt() {
			f.Equal(v, 0)
		}
	})
}

// Insert SQL INSERT.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Insert(create interface{}, ways ...*hey.Way) (int64, error) {
    if create == nil {
        return 0, nil
    }
	ctx, cancel := context.WithTimeout(s.basic.ctx, s.basic.sqlExecuteMaxDuration)
	defer cancel()
	return s.Add(ways...).
		Context(ctx).
		Default(func(o *hey.Add) {
			timestamp := o.Way().Now().Unix()
			for _, v := range s.ColumnCreatedAt() {
				o.FieldValue(v, timestamp)
			}
		}).
		Create(create).
		Add()
}

// Delete SQL DELETE.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Delete(where hey.Filter, ways ...*hey.Way) (int64, error) {
	if where.IsEmpty() {
		return 0, nil
	}
	ctx, cancel := context.WithTimeout(s.basic.ctx, s.basic.sqlExecuteMaxDuration)
	defer cancel()
	return s.Del(ways...).
		Context(ctx).
		Where(where.Use(s.Available())).
		Del()
}

// Update SQL UPDATE.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Update(update func(f hey.Filter, u *hey.Mod), ways ...*hey.Way) (int64, error) {
    filter := s.Filter()
    modify := s.Mod(ways...)
    if update != nil {
        update(filter, modify)
    }
    if filter.IsEmpty() {
        return 0, nil
    }
    modify.Default(func(o *hey.Mod) {
        timestamp := o.Way().Now().Unix()
        for _, v := range s.ColumnUpdatedAt() {
            o.Set(v, timestamp)
        }
    })
	ctx, cancel := context.WithTimeout(s.basic.ctx, s.basic.sqlExecuteMaxDuration)
	defer cancel()
	return modify.Context(ctx).Where(filter.Use(s.Available())).Mod()
}

// InsertOne Insert a record and return the auto-increment id.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) InsertOne(create interface{}, ways ...*hey.Way) (int64, error) {
    if create == nil {
		return 0, nil
	}
	ctx, cancel := context.WithTimeout(s.basic.ctx, s.basic.sqlExecuteMaxDuration)
    defer cancel()
    return s.Add(ways...).Context(ctx).
        Default(func(o *hey.Add) {
            timestamp := o.Way().Now().Unix()
            for _, v := range s.ColumnCreatedAt() {
                o.FieldValue(v, timestamp)
            }
        }).Create(create).ReturningId()
}

// InsertSelect SQL INSERT SELECT.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) InsertSelect(columns []string, get *hey.Get, ways ...*hey.Way) (int64, error) {
    if len(columns) == 0 || get == nil {
		return 0, nil
	}
	ctx, cancel := context.WithTimeout(s.basic.ctx, s.basic.sqlExecuteMaxDuration)
	defer cancel()
	return s.Add(ways...).Context(ctx).ValuesSubQueryGet(get, columns...).Add()
}

// SelectCount SQL SELECT COUNT.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectCount(where hey.Filter, ways ...*hey.Way) (int64, error) {
	return s.Get(ways...).Where(where).Count()
}

// SelectQuery SQL SELECT.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectQuery(where hey.Filter, custom func(get *hey.Get), query func(rows *sql.Rows) error, ways ...*hey.Way) error {
	get := s.Get(ways...).Where(where)
	if custom != nil {
		custom(get)
	}
	return get.Query(query)
}

// EmptySlice Initialize an empty slice.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) EmptySlice() []*{{{.OriginNamePascal}}} {
	return make([]*{{{.OriginNamePascal}}}, 0, 32)
}

// SelectGet SQL SELECT.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectGet(where hey.Filter, custom func(get *hey.Get), receive interface{}, ways ...*hey.Way) error {
	get := s.Get(ways...).Where(where)
	if custom != nil {
		custom(get)
	}
	return get.Get(receive)
}

// SelectAll SQL SELECT ALL.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectAll(where hey.Filter, custom func(get *hey.Get), ways ...*hey.Way) ([]*{{{.OriginNamePascal}}}, error) {
	get := s.Get(ways...).Where(where)
	if custom != nil {
		custom(get)
	}
	all := s.EmptySlice()
	err := get.Get(&all)
	if err != nil {
		return nil, err
	}
	return all, nil
}

// SelectOne SQL SELECT ONE.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectOne(where hey.Filter, custom func(get *hey.Get), ways ...*hey.Way) (*{{{.OriginNamePascal}}}, error) {
	all, err := s.SelectAll(where, func(get *hey.Get) {
		if custom != nil {
			custom(get)
		}
		get.Limit(1)
	}, ways...)
	if err != nil {
		return nil, err
	}
	if len(all) == 0 {
		return nil, nil
	}
	return all[0], nil
}

// SelectExists SQL SELECT EXISTS.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectExists(where hey.Filter, custom func(get *hey.Get), ways ...*hey.Way) (bool, error) {
	exists, err := s.SelectOne(where, func(get *hey.Get) {
		if custom != nil {
			custom(get)
		}
		get.Column(s.columnSlice[0])
	}, ways...)
	if err != nil {
		return false, err
	}
	return exists != nil, nil
}

// SelectCountAll SQL SELECT COUNT + ALL.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectCountAll(where hey.Filter, custom func(get *hey.Get), ways ...*hey.Way) (int64, []*{{{.OriginNamePascal}}}, error) {
	total, err := s.SelectCount(where, ways...)
	if err != nil {
		return 0, nil, err
	}
	if total == 0 {
		return 0, make([]*{{{.OriginNamePascal}}}, 0), nil
	}
	all, err := s.SelectAll(where, custom, ways...)
	if err != nil {
		return 0, nil, err
	}
	return total, all, nil
}

// SelectCountGet SQL SELECT COUNT + GET.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectCountGet(where hey.Filter, custom func(get *hey.Get), receive interface{}, ways ...*hey.Way) (int64, error) {
	count, err := s.SelectCount(where, ways...)
	if err != nil {
		return 0, err
	}
	if count == 0 {
		return 0, nil
	}
	if err = s.SelectGet(where, custom, receive, ways...); err != nil {
		return 0, err
	}
	return count, nil
}

// SelectAllMap Make map[string]*{{{.OriginNamePascal}}}
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectAllMap(where hey.Filter, makeMapKey func(v *{{{.OriginNamePascal}}}) string, custom func(get *hey.Get), ways ...*hey.Way) (map[string]*{{{.OriginNamePascal}}}, []*{{{.OriginNamePascal}}}, error) {
	all, err := s.SelectAll(where, custom, ways...)
	if err != nil {
		return nil, nil, err
	}
	allMap := make(map[string]*{{{.OriginNamePascal}}}, len(all))
	for _, v := range all {
		allMap[makeMapKey(v)] = v
	}
	return allMap, all, nil
}

// SelectAllMapInt Make map[int]*{{{.OriginNamePascal}}}
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectAllMapInt(where hey.Filter, makeMapKey func(v *{{{.OriginNamePascal}}}) int, custom func(get *hey.Get), ways ...*hey.Way) (map[int]*{{{.OriginNamePascal}}}, []*{{{.OriginNamePascal}}}, error) {
	all, err := s.SelectAll(where, custom, ways...)
	if err != nil {
		return nil, nil, err
	}
	allMap := make(map[int]*{{{.OriginNamePascal}}}, len(all))
	for _, v := range all {
		allMap[makeMapKey(v)] = v
	}
	return allMap, all, nil
}

// SelectAllMapInt64 Make map[int64]*{{{.OriginNamePascal}}}
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectAllMapInt64(where hey.Filter, makeMapKey func(v *{{{.OriginNamePascal}}}) int64, custom func(get *hey.Get), ways ...*hey.Way) (map[int64]*{{{.OriginNamePascal}}}, []*{{{.OriginNamePascal}}}, error) {
	all, err := s.SelectAll(where, custom, ways...)
	if err != nil {
		return nil, nil, err
	}
	allMap := make(map[int64]*{{{.OriginNamePascal}}}, len(all))
	for _, v := range all {
		allMap[makeMapKey(v)] = v
	}
	return allMap, all, nil
}

// DeleteByColumn Delete by column values. Additional conditions can be added in the filters. no transaction support.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) DeleteByColumn(column string, values interface{}, filters ...hey.Filter) (int64, error) {
	return s.Delete(s.Filter().In(column, values).Use(filters...))
}

// UpdateByColumn Update by column values. Additional conditions can be added in the filters. no transaction support.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) UpdateByColumn(column string, values interface{}, modify interface{}, filters ...hey.Filter) (int64, error) {
	if modify == nil {
		return 0, nil
	}
	return s.Update(func(f hey.Filter, u *hey.Mod) {
		f.In(column, values).Use(filters...)
		u.Modify(modify)
	})
}

// SelectAllByColumn Select all by column values. no transaction support.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectAllByColumn(column string, values interface{}, customs ...func(f hey.Filter, g *hey.Get)) ([]*{{{.OriginNamePascal}}}, error) {
	where := s.Filter().In(column, values)
	return s.SelectAll(where, func(get *hey.Get) {
		for _, custom := range customs {
			if custom != nil {
				custom(where, get)
				break
			}
		}
	})
}

// SelectOneByColumn Select one by column values. no transaction support.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectOneByColumn(column string, values interface{}, customs ...func(f hey.Filter, g *hey.Get)) (*{{{.OriginNamePascal}}}, error) {
	where := s.Filter().In(column, values)
	return s.SelectOne(where, func(get *hey.Get) {
		for _, custom := range customs {
			if custom != nil {
				custom(where, get)
				break
			}
		}
	})
}

// SelectExistsByColumn Select exists by column values. no transaction support.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectExistsByColumn(column string, values interface{}, customs ...func(f hey.Filter, g *hey.Get)) (bool, error) {
	where := s.Filter().In(column, values)
	return s.SelectExists(where, func(get *hey.Get) {
		for _, custom := range customs {
			if custom != nil {
				custom(where, get)
				break
			}
		}
	})
}

// SelectGetByColumn Select get by column values. no transaction support.
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) SelectGetByColumn(column string, values interface{}, receive interface{}, customs ...func(f hey.Filter, g *hey.Get)) error {
	where := s.Filter().In(column, values)
	return s.SelectGet(where, func(get *hey.Get) {
		for _, custom := range customs {
			if custom != nil {
				custom(where, get)
				break
			}
		}
	}, receive)
}

func new{{{.Schema}}}{{{.OriginNamePascal}}}(basic BASIC, way *hey.Way) *{{{.Schema}}}{{{.OriginNamePascal}}} {
	s := &{{{.Schema}}}{{{.OriginNamePascal}}}{
{{{range $k, $v := .StructColumnSchemaValues}}}{{{$v}}}{{{end}}}
	}
	s.columnMap = {{{.StructColumnSchemaValuesAccessMap}}}
	s.columnSlice = {{{.StructColumnSchemaValuesAccess}}}
	s.basic = &basic
	s.way = way
	s.table = "{{{.OriginNameWithPrefix}}}"
	s.comment = "{{{.Comment}}}"
	return s
}

type INSERT{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnAdd}}}{{{$v}}}{{{end}}}
}

{{{ .StructColumnAddPrimaryKey }}}

{{{ .StructColumnPrimaryKey }}}

type UPDATE{{{.OriginNamePascal}}} struct {
{{{range $k, $v := .StructColumnMod}}}{{{$v}}}{{{end}}}
}

{{{.PrimaryKey}}}

// ValueStruct struct value
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ValueStruct() interface{} {
	return {{{.OriginNamePascal}}}{}
}

// ValueStructPtr struct pointer value
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ValueStructPtr() interface{} {
	return &{{{.OriginNamePascal}}}{}
}

// ValueSliceStruct slice struct value
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ValueSliceStruct(capacities ...int) interface{} {
    capacity := 8
    for i := len(capacities) - 1; i >= 0; i++ {
        if capacities[i] >= 0 {
            capacity = capacities[i]
            break
        }
    }
	return make([]{{{.OriginNamePascal}}}, 0, capacity)
}

// ValueSliceStructPtr slice struct pointer value
func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) ValueSliceStructPtr(capacities ...int) interface{} {
	capacity := 8
    for i := len(capacities) - 1; i >= 0; i++ {
        if capacities[i] >= 0 {
            capacity = capacities[i]
            break
        }
    }
    return make([]*{{{.OriginNamePascal}}}, 0, capacity)
}

type {{{.Schema}}}{{{.OriginNamePascal}}}Alias struct {
    *{{{.Schema}}}{{{.OriginNamePascal}}}

{{{range $k, $v := .StructColumnSchema}}}{{{$v}}}{{{end}}}

    table string
    alias string
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}) Alias(aliases ...string) *{{{.Schema}}}{{{.OriginNamePascal}}}Alias {
    alias := s.table
    if tmp := hey.LastNotEmptyString(aliases); tmp != "" {
        alias = tmp
    }
    adjust := s.way.T().SetAlias(alias)
    column := func(column string) string { return adjust.Column(column) }
	tmp := &{{{.Schema}}}{{{.OriginNamePascal}}}Alias{
{{{range $k, $v := .StructColumnSchemaValuesAlias}}}{{{$v}}}{{{end}}}

        table: s.table,
        alias: alias,
	}
	tmp.{{{.Schema}}}{{{.OriginNamePascal}}} = s
	return tmp
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}Alias) Table() string {
	return s.table
}

func (s *{{{.Schema}}}{{{.OriginNamePascal}}}Alias) Alias() string {
	if s.alias != "" {
		return s.alias
	}
	return s.Table()
}
